(()=>{var e={305:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(486),n=i(53),o=i(304),r=i(486);var a,d,l;!function(e){e.eCode_2="Account has been closed. For further information, please contact fairplay@<domainName>.com",e.eCode_8="You are not authorized to associate your <productName> account with Facebook Account from this network",e.eCode_12="Multiple Login Failure Attempts",e.eCode_13="Account with this email ID already exists. If you are an exiting user, please Sign in",e.eCode_14="Account is already associated to another Facebook account",e.eCode_15="Invalid Username/Email or Password",e.eCode_16="Something went wrong! Try again after sometime.",e.eCode_17="Something went wrong! Try again after sometime.",e.eCode_18="Human validation failed",e.eCode_20="Facebook account is already associated with another <productName> account"}(a||(a={})),function(e){e.FB_BTN="fb_btn",e.POPUP_DIV="social_popup",e.MOBILE_INPUT_POPUP="social_mobile_input",e.WELCOME_TXT="fb_welcome_txt",e.MOBILE_FIELD_BOX="fb_mobile_field_box",e.MOBILE_FIELD="fb_mobile_field",e.MOBILE_ERROR="fb_mobile_error",e.INVITE_FIELD_BOX="fb_invite_field_box",e.INVITE_FIELD="fb_invite_field",e.INVITE_ERROR="fb_invite_error",e.SUBMIT_BTN="fb_submit",e.REG_EMAIL_FIELD_BOX="social_email_field_box",e.REG_EMAIL_FIELD="social_email_field",e.REG_EMAIL_ERR="social_email_err",e.SWITCH_EXISTING_USER="social_existing_user",e.OTP_POPUP="social_otp",e.OTP_SENT_MOBILE_TXT="social_otp_mobile_txt",e.CHANGE_MOBILE_BTN="social_change_mobile",e.OTP_FIELD_BOX="social_otp_box",e.OTP_FIELD="social_otp_field",e.OTP_ERROR="social_invalid_otp",e.GET_OTP_ON_CALL="social_get_opt_call_btn",e.RESEND_OTP_TIMER="social_resend_otp_timer",e.RESEND_OTP_BTN="social_resend_otp_btn",e.VERIFY_OTP="social_verify_otp",e.SWITCH_EXISTING_USER_2="social_existing_user_2",e.CHANGE_MOBILE_POPUP="social_change_mobile_popup",e.CURRENT_MOBILE="social_current_mobile",e.NEW_MOBILE_BOX="social_new_mobile_box",e.NEW_MOBILE_FIELD="social_new_mobile",e.NEW_MOBILE_ERR="social_new_mobile_err",e.SAVE_MOBILE="social_save_mobile",e.CANCEL_MOBILE="social_cancel_mobile",e.ERROR_POPUP="social_error_popup",e.ERROR_TITLE="social_error_title",e.ERROR_MSG="social_error_msg",e.ERROR_OK="social_error_ok",e.LINK_EXISTING_USER_POPUP="social_link_popup",e.WELCOME_TXT_2="fb_welcome_txt2",e.USERNAME_FIELD_BOX="social_username_field_box",e.USERNAME_FIELD="social_username_field",e.USERNAME_ERR="social_username_err",e.PWD_FIELD_BOX="social_pwd_box",e.PWD_FIELD="social_pwd",e.PWD_ERROR="social_pwd_err",e.FORGOT_PWD="social_forgot_pwd",e.LOGIN_BTN="social_login_pwd",e.SWITCH_NEW_USER="social_switch_reg",e.SHOW_PWD_BTN="social_show_pwd",e.HIDE_PWD_BTN="social_hide_pwd"}(d||(d={})),function(e){e.D_NONE="d-none",e.D_BLOCK="d-block",e.HIDE="hide",e.ERROR_BORDER="error-border",e.FB_LOADING="loader-fb"}(l||(l={}));const c="facebook-jssdk";t.default=class{constructor(){this.isFBButtonEnabled=!1,this.isFTApp=!1,this.FBAppId="",this.social_userid="",this.auth_token="",this.mobileNum="",this.inviteCode="",this.email="",this.otp="",this.challenge="",this.userName="",this.transactionId=0,this.otpIdentifier="",this.resendOtpTimerValue=30,this.resendOtpTimer=null,this.existingUsername="",this.pwd="",this.regJourneySCode=-1,(0,s.asyncScriptLoader)(["/fusionassets/widgets/geoLocation/geoLocation.js","/fusionassets/js/desktop/env_config.js","/fusionassets/widgets/2-factor-phone-verification/2-factor-mobile-verification.js"],(()=>{console.log("Init scripts loaded")}))}addCssClass(e,t){e&&(e.classList.contains(t)||e.classList.add(t))}removeCssClass(e,t){e&&e.classList.contains(t)&&e.classList.remove(t)}getErrorMsg(e){let t=this.isFTApp?"My11Circle":"RummyCircle";return a["eCode_"+e].replace("<productName>",t.toLowerCase())}getFacebookAppId(e){(0,s.asyncScriptLoader)(["/fusionassets/js/desktop/env_config.js"],(()=>{var t=(0,s.getChannelId)();return(0,s.isFantasyApp)(t)?(this.isFTApp=!0,this.FBAppId=window.fantasy_facebook_app_id,e()):(this.isFTApp=!1,this.FBAppId=window.facebook_app_id,e())}))}onLoginResponse(e){"connected"==e.status?(this.social_userid=e.authResponse.userID,this.auth_token=e.authResponse.accessToken,this.initSocialLogin()):this.showErrorPopup()}getGeoLocationInfo(){window.getGeoLocation({locationSwitch:window.LoginLocationSwitch},this.onGeoLocationInfoCallback.bind(this))}onGeoLocationInfoCallback(e){e.allow?this.initSocialLogin():e.success&&e.geoLocState?this.initSocialLogin(e.geoLocState):this.showErrorPopup()}initSocialLogin(e=""){n.APIS.initSocialLogin("FB",this.social_userid,this.auth_token,e).then((e=>{2==e.statusCode?(this.regJourneySCode=e.sCode,19==e.sCode||324==e.sCode?(this.challenge=e.challenge,this.userName=e.userName||"",this.showMobileInputPopup(!1)):323==e.sCode?(this.challenge=e.challenge,this.userName=e.userName||"",this.showMobileInputPopup(!0)):8==e.sCode?this.showErrorPopup("Not authorized","User not allowed to login from this network. For further information,please contact support@rummycircle.com"):16==e.sCode?this.showErrorPopup("IP missing","IP is missing"):2==e.sCode&&this.showErrorPopup("Account Closed","Account has been closed.For further information, please contact fairplay@rummycircle.com")):e.success?window.location.href=e.responsePage:this.showErrorPopup("Error",e.ErrorMessage)})).catch((e=>{this.showErrorPopup()}))}hideErrorPopup(){let e=document.getElementById(d.ERROR_POPUP);this.addCssClass(e,l.HIDE)}showErrorPopup(e="Error",t="Something went wrong, Please try again"){document.getElementById(d.ERROR_TITLE).innerHTML=e,document.getElementById(d.ERROR_MSG).innerHTML=t;let i=document.getElementById(d.ERROR_POPUP);this.removeCssClass(i,l.HIDE);let s=document.getElementById(d.POPUP_DIV);s.classList.contains(l.D_NONE)&&(this.hideMobileInputPopup(),this.removeCssClass(s,l.D_NONE),this.addCssClass(s,l.D_BLOCK))}enableFBButton(){this.isFBButtonEnabled=!0;let e=document.getElementById(d.FB_BTN);this.removeCssClass(e,l.FB_LOADING);let t=document.getElementById(d.POPUP_DIV);this.removeCssClass(t,l.D_BLOCK),this.addCssClass(t,l.D_NONE)}hideMobileInputPopup(){this.hideMobileError(),this.hideInviteError(),this.hideEmailError();let e=document.getElementById(d.MOBILE_INPUT_POPUP);this.addCssClass(e,l.HIDE)}fetchFBUserEmail(){window.FB.api("/me",{locale:"en_US",fields:"name, email"},this.onFetchEmailComplete.bind(this))}showMobileInputPopup(e){if(!e&&0==this.email.length)return void this.fetchFBUserEmail();let t=this.userName.split(" ")[0];document.getElementById(d.WELCOME_TXT).innerHTML=`Welcome <b>${t},</b>`,this.hideMobileError(),this.hideInviteError(),this.hideEmailError();let i=document.getElementById(d.REG_EMAIL_FIELD_BOX).parentElement;e?this.removeCssClass(i,l.HIDE):this.addCssClass(i,l.HIDE);let s=document.getElementById(d.MOBILE_INPUT_POPUP);this.removeCssClass(s,l.HIDE);let n=document.getElementById(d.POPUP_DIV);this.removeCssClass(n,l.D_NONE),this.addCssClass(n,l.D_BLOCK),(0,r.trackEvent)("view_displayed","fb_phone_form_shown")}hideMobileError(){let e=document.getElementById(d.MOBILE_ERROR);this.addCssClass(e,l.HIDE),e.innerHTML="Enter a valid Mobile Number";let t=document.getElementById(d.MOBILE_FIELD_BOX);this.removeCssClass(t,l.ERROR_BORDER)}showMobileError(e=""){let t=document.getElementById(d.MOBILE_ERROR);this.removeCssClass(t,l.HIDE),e.length>0&&(t.innerHTML=e);let i=document.getElementById(d.MOBILE_FIELD_BOX);this.addCssClass(i,l.ERROR_BORDER)}hideInviteError(){let e=document.getElementById(d.INVITE_ERROR);this.addCssClass(e,l.HIDE);let t=document.getElementById(d.INVITE_FIELD_BOX);this.removeCssClass(t,l.ERROR_BORDER)}showInviteError(){let e=document.getElementById(d.INVITE_ERROR);this.removeCssClass(e,l.HIDE);let t=document.getElementById(d.INVITE_FIELD_BOX);this.addCssClass(t,l.ERROR_BORDER)}hideEmailError(){let e=document.getElementById(d.REG_EMAIL_ERR);this.addCssClass(e,l.HIDE);let t=document.getElementById(d.REG_EMAIL_FIELD_BOX);this.removeCssClass(t,l.ERROR_BORDER)}showEmailError(){let e=document.getElementById(d.REG_EMAIL_ERR);this.removeCssClass(e,l.HIDE);let t=document.getElementById(d.REG_EMAIL_FIELD_BOX);this.addCssClass(t,l.ERROR_BORDER)}getOtp(){n.APIS.getSocialRegOtp(this.mobileNum,this.challenge,this.email,this.inviteCode).then((e=>{"true"==e.success?(this.otpIdentifier=e.data.uniqueIdentifier,this.transactionId=e.data.otpTransactionId,this.hideMobileInputPopup(),this.showOtpVerificationPopup()):this.showMobileError(e.ErrorMessage)})).catch((e=>{this.showErrorPopup()}))}showResendOtpOptions(){let e=document.getElementById(d.RESEND_OTP_TIMER);this.addCssClass(e,l.HIDE);let t=document.getElementById(d.RESEND_OTP_BTN);this.removeCssClass(t,l.HIDE);let i=document.getElementById(d.GET_OTP_ON_CALL);this.removeCssClass(i,l.HIDE)}hideResendOtpOptions(){let e=document.getElementById(d.RESEND_OTP_TIMER);this.removeCssClass(e,l.HIDE);let t=document.getElementById(d.RESEND_OTP_BTN);this.addCssClass(t,l.HIDE);let i=document.getElementById(d.GET_OTP_ON_CALL);this.addCssClass(i,l.HIDE)}showIncorrectOtp(){let e=document.getElementById(d.OTP_FIELD_BOX);this.addCssClass(e,l.ERROR_BORDER);let t=document.getElementById(d.OTP_ERROR);this.removeCssClass(t,l.HIDE)}hideIncorrectOtp(){let e=document.getElementById(d.OTP_FIELD_BOX);this.removeCssClass(e,l.ERROR_BORDER);let t=document.getElementById(d.OTP_ERROR);this.addCssClass(t,l.HIDE)}hideOtpVerificationPopup(){null!=this.resendOtpTimer&&(clearTimeout(this.resendOtpTimer),this.resendOtpTimer=null),this.hideResendOtpOptions(),this.hideIncorrectOtp(),document.getElementById(d.OTP_FIELD).value="";let e=document.getElementById(d.OTP_POPUP);this.addCssClass(e,l.HIDE)}showOtpVerificationPopup(){document.getElementById(d.OTP_SENT_MOBILE_TXT).innerHTML=this.mobileNum,this.resendOtpTimerValue=30,this.startResendOtpTimer();let e=document.getElementById(d.OTP_POPUP);this.removeCssClass(e,l.HIDE),(0,r.trackEvent)("view_displayed","verify_with_otp_shown")}startResendOtpTimer(){null!=this.resendOtpTimer&&clearTimeout(this.resendOtpTimer),this.resendOtpTimer=setTimeout((()=>{this.resendOtpTimerValue--;let e=document.getElementById(d.RESEND_OTP_TIMER);this.resendOtpTimerValue>0?(e.innerHTML="Resend OTP in 00."+(this.resendOtpTimerValue>=10?this.resendOtpTimerValue:"0"+this.resendOtpTimerValue),this.startResendOtpTimer()):(this.resendOtpTimer=null,this.showResendOtpOptions())}),1e3)}verifyOtp(){n.APIS.verifySocialRegOtp(this.mobileNum,this.otp,this.otpIdentifier).then((e=>{e.success?window.location.href=e.responsePage:(this.showIncorrectOtp(),this.startResendOtpTimer())})).catch((e=>{this.showIncorrectOtp(),this.startResendOtpTimer()}))}invokeResendOtp(e=!1){n.APIS.resendOtp(8,this.transactionId,e,this.mobileNum).then((e=>{})).catch((e=>{console.error("invoke resend otp err",e.message)}))}showInvalidNewMobile(){let e=document.getElementById(d.NEW_MOBILE_BOX);this.addCssClass(e,l.ERROR_BORDER);let t=document.getElementById(d.NEW_MOBILE_ERR);this.removeCssClass(t,l.HIDE)}hideInvalidNewMobile(){let e=document.getElementById(d.NEW_MOBILE_BOX);this.removeCssClass(e,l.ERROR_BORDER);let t=document.getElementById(d.NEW_MOBILE_ERR);this.addCssClass(t,l.HIDE)}hideChangeMobilePopup(){this.hideInvalidNewMobile(),document.getElementById(d.NEW_MOBILE_FIELD).value="";let e=document.getElementById(d.CHANGE_MOBILE_POPUP);this.addCssClass(e,l.HIDE)}showChangeMobilePopup(){document.getElementById(d.CURRENT_MOBILE).innerHTML=this.mobileNum;let e=document.getElementById(d.CHANGE_MOBILE_POPUP);this.removeCssClass(e,l.HIDE)}showLinkAccountPopup(){let e=document.getElementById(d.LINK_EXISTING_USER_POPUP);this.removeCssClass(e,l.HIDE)}hideLinkAccountPopup(){document.getElementById(d.USERNAME_FIELD).value="",document.getElementById(d.PWD_FIELD).value="",document.getElementById(d.PWD_FIELD).type="password";let e=document.getElementById(d.SHOW_PWD_BTN);this.removeCssClass(e,l.HIDE);let t=document.getElementById(d.HIDE_PWD_BTN);this.addCssClass(t,l.HIDE),this.hideUsernameError(),this.hidePwdError();let i=document.getElementById(d.LINK_EXISTING_USER_POPUP);this.addCssClass(i,l.HIDE)}hideUsernameError(){let e=document.getElementById(d.USERNAME_FIELD_BOX);this.removeCssClass(e,l.ERROR_BORDER);let t=document.getElementById(d.USERNAME_ERR);this.addCssClass(t,l.HIDE)}showUsernameError(e="Enter a valid Username"){let t=document.getElementById(d.USERNAME_FIELD_BOX);this.addCssClass(t,l.ERROR_BORDER);let i=document.getElementById(d.USERNAME_ERR);i.innerHTML=e,this.removeCssClass(i,l.HIDE)}hidePwdError(){let e=document.getElementById(d.PWD_FIELD_BOX);this.removeCssClass(e,l.ERROR_BORDER);let t=document.getElementById(d.PWD_ERROR);this.addCssClass(t,l.HIDE)}showPwdError(){let e=document.getElementById(d.PWD_FIELD_BOX);this.addCssClass(e,l.ERROR_BORDER);let t=document.getElementById(d.PWD_ERROR);this.removeCssClass(t,l.HIDE)}linkSocialAccount(){n.APIS.linkSocialAccount(this.existingUsername,this.pwd,this.challenge).then((e=>{e.success?window.location.href=e.responsePage:(this.hideLinkAccountPopup(),this.showErrorPopup())})).catch((e=>{this.hideLinkAccountPopup(),this.showErrorPopup()}))}assignEventListeners(){document.getElementById(d.FB_BTN).addEventListener("click",this.onClickFBButton.bind(this)),document.getElementById(d.SUBMIT_BTN).addEventListener("click",this.onClickSubmit.bind(this)),document.getElementById(d.VERIFY_OTP).addEventListener("click",this.onClickVerifyOtp.bind(this)),document.getElementById(d.RESEND_OTP_BTN).addEventListener("click",this.onClickResendOtp.bind(this)),document.getElementById(d.GET_OTP_ON_CALL).addEventListener("click",this.onClickGetOtpOnCall.bind(this)),document.getElementById(d.CHANGE_MOBILE_BTN).addEventListener("click",this.onClickChangeNumber.bind(this)),document.getElementById(d.CANCEL_MOBILE).addEventListener("click",this.onClickCancelChangeMobile.bind(this)),document.getElementById(d.SAVE_MOBILE).addEventListener("click",this.onClickSaveMobile.bind(this)),document.getElementById(d.ERROR_OK).addEventListener("click",this.onClickOk.bind(this)),document.getElementById(d.SWITCH_EXISTING_USER).addEventListener("click",this.onClickSwtichExistingUser.bind(this)),document.getElementById(d.SWITCH_EXISTING_USER_2).addEventListener("click",this.onClickSwtichExistingUser_2.bind(this)),document.getElementById(d.SWITCH_NEW_USER).addEventListener("click",this.onClickSwitchNewUser.bind(this)),document.getElementById(d.LOGIN_BTN).addEventListener("click",this.onClickLoginBtn.bind(this)),document.getElementById(d.FORGOT_PWD).addEventListener("click",this.onClickForgotPwd.bind(this)),document.getElementById(d.SHOW_PWD_BTN).addEventListener("click",this.onClickShowPwd.bind(this)),document.getElementById(d.HIDE_PWD_BTN).addEventListener("click",this.onClickHidePwd.bind(this))}init(){this.assignEventListeners(),this.getFacebookAppId((()=>{if(window.fbAsyncInit=()=>{window.FB.init({appId:this.FBAppId,xfbml:!0,status:!0,version:"v3.2"}),window.FB.AppEvents.logPageView()},!document.getElementById(c)){let e=document.createElement("script");e.id=c,e.type="text/javascript",e.src="//connect.facebook.net/en_US/sdk.js",document.getElementsByTagName("body")[0].appendChild(e)}this.isFBButtonEnabled=!0}))}onClickFBButton(){if(!this.isFBButtonEnabled)return;this.isFBButtonEnabled=!1;let e=document.getElementById(d.FB_BTN);this.addCssClass(e,l.FB_LOADING),this.initFBLogin(),(0,r.trackEvent)("facebookloginbuttonclicked","facebookLogin")}initFBLogin(){window.FB.login(this.onLoginResponse.bind(this),{scope:"public_profile,email",return_scopes:!0})}onClickSubmit(){if((0,r.trackEvent)("facebookloginbuttonclicked","facebooklogin"),323==this.regJourneySCode){if(this.email=document.getElementById(d.REG_EMAIL_FIELD).value,!o.validations.isEmail(this.email))return void this.showEmailError();this.hideEmailError()}this.mobileNum=document.getElementById(d.MOBILE_FIELD).value,o.validations.isMobileNumber(this.mobileNum)?(this.hideMobileError(),this.inviteCode=document.getElementById(d.INVITE_FIELD).value,this.inviteCode.length>=1&&this.inviteCode.length<8?this.showInviteError():(this.hideInviteError(),this.getOtp())):this.showMobileError()}onClickVerifyOtp(){(0,r.trackEvent)("clicked","verify_with_otp"),this.otp=document.getElementById(d.OTP_FIELD).value,o.validations.isOtp(this.otp)?(this.hideIncorrectOtp(),null!=this.resendOtpTimer&&(clearTimeout(this.resendOtpTimer),this.resendOtpTimer=null),this.verifyOtp()):this.showIncorrectOtp()}onClickResendOtp(){(0,r.trackEvent)("clicked","resent_otp"),this.resendOtpTimerValue=30,this.hideResendOtpOptions(),this.startResendOtpTimer(),this.invokeResendOtp()}onClickGetOtpOnCall(){(0,r.trackEvent)("clicked","get_otp_on_call"),this.resendOtpTimerValue=30,this.hideResendOtpOptions(),this.startResendOtpTimer(),this.invokeResendOtp(!0)}onClickChangeNumber(){(0,r.trackEvent)("clicked","change_number"),this.hideOtpVerificationPopup(),this.showChangeMobilePopup()}onClickCancelChangeMobile(){(0,r.trackEvent)("clicked","cancel_number_change"),this.hideChangeMobilePopup(),this.showOtpVerificationPopup()}onClickSaveMobile(){(0,r.trackEvent)("clicked","save_and_get_otp");let e=document.getElementById(d.NEW_MOBILE_FIELD).value;o.validations.isMobileNumber(e)?(this.hideInvalidNewMobile(),e!=this.mobileNum?(this.mobileNum=e,this.getOtp()):this.showOtpVerificationPopup(),this.hideChangeMobilePopup()):this.showInvalidNewMobile()}onClickOk(){this.hideErrorPopup(),this.enableFBButton()}onClickSwtichExistingUser(){this.hideMobileInputPopup(),this.showLinkAccountPopup()}onClickSwtichExistingUser_2(){this.hideOtpVerificationPopup(),this.showLinkAccountPopup()}onClickLoginBtn(){this.existingUsername=document.getElementById(d.USERNAME_FIELD).value,0!=this.existingUsername.length?-1==this.existingUsername.indexOf("@")||o.validations.isEmail(this.existingUsername)?(this.hideUsernameError(),this.pwd=document.getElementById(d.PWD_FIELD).value,0!=this.pwd.length?(this.hidePwdError(),this.linkSocialAccount()):this.showPwdError()):this.showUsernameError("Please enter a valid Email ID"):this.showUsernameError("Please enter your Email ID / Username")}onClickSwitchNewUser(){this.hideLinkAccountPopup(),19==this.regJourneySCode||324==this.regJourneySCode?this.showMobileInputPopup(!1):323==this.regJourneySCode&&this.showMobileInputPopup(!0)}onClickForgotPwd(){window.location.href="/player/account/forgot-password.html"}onFetchEmailComplete(e){e&&e.email?(this.email=e.email,this.userName=e.name,this.showMobileInputPopup(!1)):this.showMobileInputPopup(!0)}onClickShowPwd(){document.getElementById(d.PWD_FIELD).type="text";let e=document.getElementById(d.SHOW_PWD_BTN);this.addCssClass(e,l.HIDE);let t=document.getElementById(d.HIDE_PWD_BTN);this.removeCssClass(t,l.HIDE)}onClickHidePwd(){document.getElementById(d.PWD_FIELD).type="password";let e=document.getElementById(d.SHOW_PWD_BTN);this.removeCssClass(e,l.HIDE);let t=document.getElementById(d.HIDE_PWD_BTN);this.addCssClass(t,l.HIDE)}}},509:function(e,t,i){"use strict";var s=this&&this.__awaiter||function(e,t,i,s){return new(i||(i=Promise))((function(n,o){function r(e){try{d(s.next(e))}catch(e){o(e)}}function a(e){try{d(s.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(r,a)}d((s=s.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.TCLogin=void 0;const n=i(472),o=i(53),r=i(486);var a,d;!function(e){e.RBD_BLOCK="/rcspa/rbd/"}(a||(a={})),function(e){e.tel="tel",e.email="email",e.text="text",e.search="search"}(d||(d={}));const l="#tc-progress-container",c=".tc-progress-info",h="/fusionassets/img/tc_loader.gif";class E{constructor(e,t){this.isAndroidDevice=/(android)/i.test(navigator.userAgent),this.onTcElementClick=e=>{let t=e.target;this.inputFieldRef.disabled=!1,t.id!==n.ELEM.MOBILE_INPUT_FIELD&&t.id!=n.ELEM.GET_STARTED_BTN||(this.inputFieldRef.type!==d.tel&&(this.inputFieldRef.type=d.tel),this.tcElementRef.removeEventListener("click",this.onTcElementClick),this.invokeTcVerification())},this.handleProgressActions=e=>{const t=e.target;if(!t)return;let i=document.querySelector(c);null==i||i.classList.add("hide"),null==i||i.removeEventListener("click",this.handleProgressActions),this.toggleLoader(),"_tcSkip"===t.id?this.tcElementRef.focus():"_tcRetry"===t.id&&this.invokeTcVerification()},this.tcUrlParams=e,this.requestNonce=null,this.tcElementRef=t,this.pollingInProgress=!1,this.inputFieldRef=null==t?void 0:t.querySelector(`#${n.ELEM.MOBILE_INPUT_FIELD}`)}static setRefCode(e){E.refCode=e}init(){this.tcLoaderContent(),this.listentoInputFoucus()}listentoInputFoucus(){this.tcElementRef.addEventListener("click",this.onTcElementClick),this.inputFieldRef.disabled=!0}invokeTcVerification(){this.requestNonce=this.getRequestId();let e="truecallersdk://truesdk/web_verify?type=btmsheet";this.tcUrlParams.requestNonce=this.requestNonce,Object.entries(this.tcUrlParams).forEach((([t,i])=>{e+=`&${t}=${i}`})),window.location=e,this.detectTcExist()}detectTcExist(){setTimeout((()=>{document.hasFocus()?this.focusInputField():((0,r.trackEvent)("gtm.shown","true_caller_popup_shown",null,{request_id:this.requestNonce}),this.toggleLoader(),this.pollingInProgress=!0,this.startPolling(),document.querySelector(".tc-progress img").src=h)}),600)}handleErrorCase(){var e;const t=document.querySelector(c);null==t||t.classList.remove("hide");let i=null===(e=null==t?void 0:t.parentElement)||void 0===e?void 0:e.firstElementChild;i&&(i.src="/fusionassets/img/tc_broken.svg"),null==t||t.addEventListener("click",this.handleProgressActions)}toggleLoader(){var e;null===(e=document.querySelector(l))||void 0===e||e.classList.toggle("hide")}tcLoaderContent(){var e;const t=document.createElement("div");t.id="tc-progress-container",t.className="hide",t.innerHTML=`<div class="tc-progress-content">\n                <div class="tc-progress">\n                    <img src="${h}">\n                    <div class="tc-progress-info hide"> \n                         <p>Seems like something is broken, do not worry, please click on ‘Try again’ to login</p>\n                         <div class="tc-actions"> \n                             <button id="_tcSkip">Cancel</button>\n                            <button id="_tcRetry">Try Again</button>\n                         </div>\n                    </div>\n                </div>\n            </div>`,null===(e=document.body)||void 0===e||e.appendChild(t)}startPolling(e=8){return s(this,void 0,void 0,(function*(){try{if(!this.pollingInProgress)return;if(!e)throw new Error("Call Exhausted!!");yield new Promise((e=>setTimeout(e,2e3)));const t=yield o.APIS.getTruecallerStatus(this.requestNonce||"");if("USER_EXIST"===t.status)(0,r.trackEvent)("gtm.click","tc_click_on_use_phone_number",null,{request_id:this.requestNonce}),yield this.registerUser(),this.stopPolling();else if("USER_REJECTED"===t.status)(0,r.trackEvent)("action_failed","tc_user_rejected",null,{request_id:this.requestNonce}),this.stopPolling(),this.focusInputField();else{if("USER_NOT_EXIST"!==t.status)throw new Error(t);this.startPolling(e-1)}}catch(e){this.handleErrorCase(),this.tcElementRef.removeEventListener("click",this.onTcElementClick)}}))}registerUser(){var e;return s(this,void 0,void 0,(function*(){let t=(0,r.getChannelId)();const i=yield o.APIS.registerTcUser(this.requestNonce||"",E.refCode);let s={responsePage:i.responsePage,userId:null===(e=i.data)||void 0===e?void 0:e.userId};setTimeout((()=>{var e;2===t&&document.getElementById(n.ELEM.RBD)&&(null===(e=i.data)||void 0===e?void 0:e.register)?(sessionStorage.setItem(n.ELEM.RBD,JSON.stringify(s)),window.location.pathname=a.RBD_BLOCK):null!=i.responsePage&&(window.location.href=i.responsePage)}))}))}focusInputField(){setTimeout((()=>{var e;null===(e=document.getElementById(n.ELEM.MOBILE_INPUT_FIELD))||void 0===e||e.focus()}),100)}stopPolling(){var e;this.pollingInProgress=!1,null===(e=document.querySelector(l))||void 0===e||e.classList.add("hide")}getRequestId(e=""){return`${e}${this.uuidv4()}`}uuidv4(){return window.crypto?(String(1e5)+String(1e3)+String(4e3)+String(8e4)).replace(/[018]/g,(e=>(Number(e)^window.crypto.getRandomValues(new Uint8Array(1))[0]&15>>Number(e)/4).toString(16))):Date.now().toString(36)+Math.random().toString(36).substring(2)}}t.TCLogin=E,E.refCode=""},53:function(e,t,i){"use strict";var s=this&&this.__awaiter||function(e,t,i,s){return new(i||(i=Promise))((function(n,o){function r(e){try{d(s.next(e))}catch(e){o(e)}}function a(e){try{d(s.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(r,a)}d((s=s.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.APIS=void 0;const n=i(486);var o,r;!function(e){e.getOtpRegStep1="/api/fl/auth/v3/getOtp",e.verifyOtpRegStep2="/api/fl/auth/v3/authenticate",e.validateInviteCode="/api/fl/baf/v1/validateInviteCode",e.resendOtp="/api/fl/account/v1/sendOtp",e.getOtpLoginStep1="/api/fl/auth/v2/getLogin",e.verifyLoginStep2="/api/fl/auth/v2/login",e.socialLogin="/api/fl/auth/v3/social/login",e.getOtpSocialRegStep1="/api/fl/auth/v3/social/getOtp",e.verifyOtpSocialRegStep2="/api/fl/auth/v3/social/register",e.linkSocialAccount="/social/linkFBwithRCaccount",e.verify2FAOtp="/signup/verify",e.getCaptcha="/api/captcha/v1/getCaptcha",e.tcUserRegister="/api/fl/auth/v3/tcAuthenticate",e.tcPolling="/api/pp/poll/v1/truecaller/"}(o||(o={})),function(e){e.DEV="development",e.PROD="production"}(r||(r={})),t.APIS=new class{constructor(){this.BASE_URL="production"===r.DEV?"https://docker-undefined.fickle.my11circle.com":""}getOtpRegStep1(e,t=""){return s(this,void 0,void 0,(function*(){let i={mobile:e,deviceId:(0,n.deviceId)(),deviceName:"",refCode:t,isPlaycircle:!1};const s=yield fetch(this.BASE_URL+o.getOtpRegStep1,{method:"POST",cache:"no-cache",credentials:"same-origin",headers:{"Content-Type":"application/json"},redirect:"follow",body:JSON.stringify(i)});if(!s.ok)throw new Error(`HTTP error! status: ${s.status}`);return yield s.json()}))}verifyOtpRegStep2(e,t,i){return s(this,void 0,void 0,(function*(){let s={mobile:e,otp:t,uniqueIdentifier:i};const n=yield fetch(this.BASE_URL+o.verifyOtpRegStep2,{method:"POST",cache:"no-cache",credentials:"same-origin",headers:{"Content-Type":"application/json"},redirect:"follow",body:JSON.stringify(s)});if(!n.ok)throw new Error(`HTTP error! status: ${n.status}`);return yield n.json()}))}verifyOtpRegStep2ForLogin(e,t,i){return s(this,void 0,void 0,(function*(){let s={mobile:e,otp:t,isLogin:!0,reasonCode:603,challenge:i};const n=yield fetch(this.BASE_URL+o.verifyOtpRegStep2,{method:"POST",cache:"no-cache",credentials:"same-origin",headers:{"Content-Type":"application/json"},redirect:"follow",body:JSON.stringify(s)});if(!n.ok)throw new Error(`HTTP error! status: ${n.status}`);return yield n.json()}))}validateInviteCode(e){return s(this,void 0,void 0,(function*(){let t={inviteCode:e};const i=yield fetch(this.BASE_URL+o.validateInviteCode,{method:"POST",cache:"no-cache",credentials:"same-origin",headers:{"Content-Type":"application/json"},redirect:"follow",body:JSON.stringify(t)});return yield i.json()}))}resendOtp(e,t,i=!1,n=""){return s(this,void 0,void 0,(function*(){let s={otpOnCall:i,otpType:e,transactionId:t,mobile:n};const r=yield fetch(this.BASE_URL+o.resendOtp,{method:"POST",cache:"no-cache",credentials:"include",headers:{"Content-Type":"application/json"},redirect:"follow",body:JSON.stringify(s)});return yield r.json()}))}getOtpLoginStep1(e){return s(this,void 0,void 0,(function*(){let t={loginid:e,deviceId:(0,n.deviceId)()};const i=yield fetch(this.BASE_URL+o.getOtpLoginStep1,{method:"POST",cache:"no-cache",credentials:"same-origin",headers:{"Content-Type":"application/json"},redirect:"follow",body:JSON.stringify(t)});return yield i.json()}))}verifyOtpLoginStep2(e,t,i,r){return s(this,void 0,void 0,(function*(){let s={loginid:e,otp:t,reasonCode:r,challenge:i,deviceId:(0,n.deviceId)(),deviceName:(0,n.deviceName)()};const a=yield fetch(this.BASE_URL+o.verifyLoginStep2,{method:"POST",cache:"no-cache",credentials:"same-origin",headers:{"Content-Type":"application/json"},redirect:"follow",body:JSON.stringify(s)});return yield a.json()}))}verifyPassword(e,t,i,r=1){return s(this,void 0,void 0,(function*(){let s={loginid:e,passwd:t,reasonCode:r,challenge:i,deviceId:(0,n.deviceId)(),deviceName:(0,n.deviceName)()};const a=yield fetch(this.BASE_URL+o.verifyLoginStep2,{method:"POST",cache:"no-cache",credentials:"same-origin",headers:{"Content-Type":"application/json"},redirect:"follow",body:JSON.stringify(s)});return yield a.json()}))}initSocialLogin(e,t,i,r=""){return s(this,void 0,void 0,(function*(){let s={value:{socialType:e,social_userid:t,auth_token:i,isMobileMandatory:!0},deviceId:(0,n.deviceId)(),geoLocState:r};const a=yield fetch(this.BASE_URL+o.socialLogin,{method:"POST",cache:"no-cache",credentials:"same-origin",headers:{"Content-Type":"application/json"},redirect:"follow",body:JSON.stringify(s)});return yield a.json()}))}getSocialRegOtp(e,t,i,r=""){return s(this,void 0,void 0,(function*(){let s={mobile:e,deviceId:(0,n.deviceId)(),refCode:r,challenge:t,email:i};const a=yield fetch(this.BASE_URL+o.getOtpSocialRegStep1,{method:"POST",cache:"no-cache",credentials:"same-origin",headers:{"Content-Type":"application/json"},redirect:"follow",body:JSON.stringify(s)});return yield a.json()}))}verifySocialRegOtp(e,t,i){return s(this,void 0,void 0,(function*(){let s={mobile:e,uniqueIdentifier:i,otp:t};const n=yield fetch(this.BASE_URL+o.verifyOtpSocialRegStep2,{method:"POST",cache:"no-cache",credentials:"same-origin",headers:{"Content-Type":"application/json"},redirect:"follow",body:JSON.stringify(s)});return yield n.json()}))}linkSocialAccount(e,t,i){return s(this,void 0,void 0,(function*(){let s={usernameoremail:e,passwrd:t,challenge:i,deviceId:(0,n.deviceId)()};const r=yield fetch(this.BASE_URL+o.linkSocialAccount,{method:"POST",cache:"no-cache",credentials:"same-origin",headers:{"Content-Type":"application/json"},redirect:"follow",body:JSON.stringify(s)});return yield r.json()}))}verify2FAOtp(e,t){return s(this,void 0,void 0,(function*(){let i={verificationText:t,authType:e,deviceId:(0,n.deviceId)()};const s=yield fetch(this.BASE_URL+o.verify2FAOtp,{method:"POST",cache:"no-cache",credentials:"same-origin",headers:{"Content-Type":"application/json"},redirect:"follow",body:JSON.stringify(i)});return yield s.json()}))}getCaptcha(){return s(this,void 0,void 0,(function*(){const e=yield fetch(this.BASE_URL+o.getCaptcha,{method:"POST",credentials:"same-origin",cache:"no-cache"});return yield e.text()}))}checkLogin(){return s(this,void 0,void 0,(function*(){const e=yield fetch(this.BASE_URL+"/api/signup/v1/checkLogin",{method:"POST",credentials:"include"});return yield e.json()}))}getTruecallerStatus(e){return s(this,void 0,void 0,(function*(){const t=yield fetch(this.BASE_URL+o.tcPolling+e,{method:"GET",cache:"no-cache"});return yield t.json()}))}registerTcUser(e,t){return s(this,void 0,void 0,(function*(){let i={requestId:e,deviceId:(0,n.deviceId)(),deviceName:(0,n.deviceName)(),refCode:t};const s=yield fetch(this.BASE_URL+o.tcUserRegister,{method:"POST",cache:"no-cache",credentials:"same-origin",headers:{"Content-Type":"application/json"},redirect:"follow",body:JSON.stringify(i)});return yield s.json()}))}resetPwd(e){return s(this,void 0,void 0,(function*(){const t=yield fetch(this.BASE_URL+"/api/myAccountApi/v1/sendResetPassword",{method:"POST",credentials:"same-origin",headers:{"Content-Type":"application/json"},cache:"no-cache",body:JSON.stringify(e)});return yield t.json()}))}}},486:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.deviceName=t.trackEvent=t.isFantasyApp=t.getChannelId=t.asyncScriptLoader=t.deviceId=void 0;const s=i(238);function n(e=null){return e?(e^16*Math.random()>>e/4).toString(16):"10000000-1000-4000-8000-100000000000".replace(/[018]/g,n)}function o(){let e=0,t=navigator.userAgent;return e=t.indexOf("rcchannelid")>0||t.indexOf("RCAndroid")>0?3:t.indexOf("RCiOS")>0?4:t.indexOf("FTAndroid")>0?2003:t.indexOf("FTiOS")>0?2004:t.indexOf("PCAndroid")>0?1000003:t.indexOf("PCiOS")>0?1000004:t.indexOf("PCRCAndroid")>0?1001003:t.indexOf("PCRCiOS")>0?1001004:t.indexOf("PCFTAndroid")>0?1002003:t.indexOf("PCFTiOS")>0?1002004:/Mobile|iP(hone|od|ad)|Android|BlackBerry|IEMobile|Kindle|NetFront|Silk-Accelerated|(hpw|web)OS|Fennec|Minimo|Opera M(obi|ini)|Blazer|Dolfin|Dolphin|Skyfire|Zune|Nokia|UCWEB/.test(t)?2:1,e}t.deviceId=function(){let e=localStorage.getItem("deviceID");return e||(e=n(),localStorage.setItem("deviceID",e)),e},t.asyncScriptLoader=function(e,t,i="dynamic-css-js"){let s=e.length;for(let n=0;n<e.length;n++)if(-1!==e[n].indexOf(".css")){let o=document.createElement("link");o.type="text/css",o.className=i,o.rel="stylesheet",o.href=e[n],document.getElementsByTagName("head")[0].appendChild(o);let r=document.createElement("img");r.onerror=()=>{s-=1,0===s&&t&&t()},r.src=e[n]}else{let o=document.createElement("script");o.type="text/javascript",o.async=!0,o.className=i,o.onload=()=>{s-=1,0===s&&t&&t()},o.src=e[n],document.getElementsByTagName("body")[0].appendChild(o)}},t.getChannelId=o,t.isFantasyApp=function(e){switch(e||(e=o()),e){case 2003:case 2004:case 1002003:case 1002004:return!0}return!1},t.deviceName=function(){let e="Desktop",t=s(navigator.userAgent);return t&&t.device&&t.device.model?e=t.device.model:t&&t.os&&t.os.name&&(e=t.os.name),e},t.trackEvent=function(e,t,i=null,s=null){window.trackThis(e,t,i,s)}},304:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.validations=void 0;var i={isEmpty:"Please enter an Email",isShort:"Email should have atleast 4 characters",isLong:"Email should have atmost 12 characters",isInvalid:"Please enter a valid Email"};t.validations=new class{constructor(){}isMobileNumber(e){return new RegExp(/^[6-9]\d{9}$/).test(e)}isOtp(e){return new RegExp(/\d{6}$/).test(e)}isEmail(e=""){return 0!=e.length&&new RegExp(/^([\w-]+(?:\.[\w-]+)*)@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$/i).test(e)}getErrorMsgForEmail(e=""){var t=i;return e?/^([\w-]+(?:\.[\w-]+)*)@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$/i.test(e)?"":t.isInvalid:t.isEmpty}}},104:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(304),n=i(53),o=i(486);var r,a,d,l,c;!function(e){e.OTP_FORM_MOBILE_ELEMENT="verify_otp_for_mobile",e.VERIFY_OTP_BTN="verifyOtp",e.OTP_CLEAR_BTN="otp_clear_btn",e.CHANGE_MOBILE_BTN="changeMobileNum",e.RESEND_OTP_TIMER_DIV="resend_otp_timer",e.OTP_INPUT_FIELD="otpInputField",e.GET_OTP_ON_CALL_BTN="get_opt_call_btn",e.INCORRECT_OTP_DIV="msg_invalid_otp",e.VERIFY_OTP_BOX="verify_otp_box",e.RESEND_OTP_BTN="resend_otp_btn",e.OTP_SENT_TXT="otp_sent_txt",e.LOGIN_WITH_PASSWORD="login_with_password",e.RBD="rbd"}(r||(r={})),function(e){e.HIDE="hide",e.INPUT_ERR_BORDER="error-border"}(a||(a={})),function(e){e.OTP_SENT_TXT_MOBILE="OTP sent to your mobile no ",e.OTP_SENT_TXT_EMAIL="OTP has been sent to "}(d||(d={})),function(e){e.MEC_WEB="MEC_WEB"}(l||(l={})),function(e){e.RBD_BLOCK="/rcspa/rbd/"}(c||(c={})),t.default=class{constructor(e){this.mobileNum="",this.inviteCode="",this.otpValue="",this.resendOtpTimerValue=30,this.resendOtpTimer=null,this.sendOtpResp=null,this.isRegJourney=!0,this.loginId="",this.reasonCode=-1,this.challenge="",this.transactionId=0,this.userInput=1,this.channel=null==e?void 0:e.channel}addCssClass(e,t){e.classList.contains(t)||e.classList.add(t)}removeCssClass(e,t){e.classList.contains(t)&&e.classList.remove(t)}setResponsePage(e){var t,i;let s=(0,o.getChannelId)(),n={responsePage:e.responsePage,userId:null===(t=e.data)||void 0===t?void 0:t.userId};this.channel===l.MEC_WEB?window.location.pathname="/mecspa/lobby/":2===s&&document.getElementById(r.RBD)&&(null===(i=e.data)||void 0===i?void 0:i.register)?(sessionStorage.setItem("rbd",JSON.stringify(n)),window.location.pathname=c.RBD_BLOCK):window.location.href=e.responsePage}clearTimerAndSendResp(){null!=this.resendOtpTimer&&(clearTimeout(this.resendOtpTimer),this.resendOtpTimer=null),this.sendOtpResp=null}setFieldDataAndTimer(){this.clearTimerAndSendResp(),this.mobileNum="",this.inviteCode=""}showInvalidOtpError(e="Incorrect OTP"){let t=document.getElementById(r.INCORRECT_OTP_DIV);t.innerHTML=e,this.removeCssClass(t,a.HIDE);let i=document.getElementById(r.VERIFY_OTP_BOX);this.addCssClass(i,a.INPUT_ERR_BORDER)}updateMobileNum(){document.getElementById(r.OTP_FORM_MOBILE_ELEMENT).innerHTML="+91-"+this.mobileNum;let e=document.getElementById(r.OTP_SENT_TXT),t=e.innerHTML.split("<span");t[0]=d.OTP_SENT_TXT_MOBILE,e.innerHTML=t.join("<span")}stopResendOtpTimer(){null!=this.resendOtpTimer&&(clearTimeout(this.resendOtpTimer),this.resendOtpTimer=null)}startResendOtpTimer(){null!=this.resendOtpTimer&&clearTimeout(this.resendOtpTimer),this.resendOtpTimer=setTimeout((()=>{this.resendOtpTimerValue--;let e=document.getElementById(r.RESEND_OTP_TIMER_DIV);this.resendOtpTimerValue>0?(e.innerHTML="Resend OTP in 00."+(this.resendOtpTimerValue>=10?this.resendOtpTimerValue:"0"+this.resendOtpTimerValue),this.startResendOtpTimer()):(this.resendOtpTimer=null,this.showResendOtpOptions())}),1e3)}showResendOtpOptions(){let e=document.getElementById(r.RESEND_OTP_TIMER_DIV);this.addCssClass(e,a.HIDE);let t=document.getElementById(r.GET_OTP_ON_CALL_BTN);this.removeCssClass(t,a.HIDE);let i=document.getElementById(r.RESEND_OTP_BTN);this.removeCssClass(i,a.HIDE)}hideResendOtpOptions(){let e=document.getElementById(r.RESEND_OTP_TIMER_DIV);this.removeCssClass(e,a.HIDE);let t=document.getElementById(r.GET_OTP_ON_CALL_BTN);this.addCssClass(t,a.HIDE);let i=document.getElementById(r.RESEND_OTP_BTN);this.addCssClass(i,a.HIDE)}getOtpIdentifier(){let e="";return null!=this.sendOtpResp&&this.sendOtpResp.data&&this.sendOtpResp.data.uniqueIdentifier&&(e=this.sendOtpResp.data.uniqueIdentifier),e}getChallenge(){let e="";return null!=this.sendOtpResp&&this.sendOtpResp.data&&this.sendOtpResp.data.challenge&&(e=this.sendOtpResp.data.challenge),e}getTransactionId(){let e=0;return null!=this.sendOtpResp&&this.sendOtpResp.data&&(this.sendOtpResp.data.otpTransactionId||this.sendOtpResp.data.transactionId)&&(e=this.sendOtpResp.data.otpTransactionId||this.sendOtpResp.data.transactionId),e}isExistingUser(){let e=!1;return null!=this.sendOtpResp&&this.sendOtpResp.data&&1==this.sendOtpResp.data.isLogin&&(e=!0),e}verifyRegistrationOtp(){n.APIS.verifyOtpRegStep2(this.mobileNum,this.otpValue,this.getOtpIdentifier()).then((e=>{e.success?((0,o.trackEvent)("action_succeeded","registration/otpverification/authentication"),this.stopResendOtpTimer(),this.setResponsePage(e)):(84==e.ErrorCode&&this.showInvalidOtpError(e.ErrorMessage),this.showInvalidOtpError(),(0,o.trackEvent)("action_failed","registration_failed",{error_message:e.ErrorMessage||"Incorrect OTP"}))})).catch((e=>{console.error("verify OTP step 2",e.message),this.showInvalidOtpError()}))}verifyLoginOtp(){n.APIS.verifyOtpRegStep2ForLogin(this.mobileNum,this.otpValue,this.getChallenge()).then((e=>{e.success?(this.stopResendOtpTimer(),(0,o.trackEvent)("action_succeeded","login/otpverification/authentication"),this.setResponsePage(e)):((0,o.trackEvent)("action_failed","login_failed",{error_message:e.ErrorMessage||"Incorrect OTP"}),this.showInvalidOtpError(e.ErrorMessage||"Incorrect OTP"))})).catch((e=>{console.error("verify OTP step 2",e.message),this.showInvalidOtpError()}))}initVerifyOtp(){this.isExistingUser()?this.verifyLoginOtp():this.verifyRegistrationOtp()}invokeResendOtp(e=!1){let t=0,i=0;this.isRegJourney&&!this.isExistingUser()?(t=this.getTransactionId(),i=8):(t=this.transactionId,i=6),n.APIS.resendOtp(i,t,e,this.mobileNum).then((e=>{})).catch((e=>{console.log("invoke resend otp err",e.message)}))}updateOtpSentText(){let e=this.loginId;601==this.reasonCode||603==this.reasonCode?e=2!=this.userInput?this.loginId:"registered email ID and mobile no.":605!=this.reasonCode&&606!=this.reasonCode||(e=3==this.userInput?this.loginId:"registered email ID"),document.getElementById(r.OTP_FORM_MOBILE_ELEMENT).innerHTML=e;let t=document.getElementById(r.OTP_SENT_TXT),i=t.innerHTML.split("<span");i[0]=d.OTP_SENT_TXT_EMAIL,t.innerHTML=i.join("<span"),this.showLoginWithPassword()}showLoginWithPassword(){if(603==this.reasonCode||606==this.reasonCode){let e=document.getElementById(r.LOGIN_WITH_PASSWORD);this.removeCssClass(e,a.HIDE)}}verifyOtpForLogin(){n.APIS.verifyOtpLoginStep2(this.loginId,this.otpValue,this.challenge,this.reasonCode).then((e=>{e.success?(this.stopResendOtpTimer(),this.setResponsePage(e)):(this.showInvalidOtpError(),(0,o.trackEvent)("action_failed","login_failed",{error_message:e.ErrorMessage||"Incorrect OTP"}))})).catch((e=>{console.log("verifyOtpForLogin",e.message),this.showInvalidOtpError()}))}showOtpClearBtn(){let e=document.getElementById(r.OTP_CLEAR_BTN);this.removeCssClass(e,a.HIDE)}hideOtpClearBtn(){let e=document.getElementById(r.OTP_CLEAR_BTN);this.addCssClass(e,a.HIDE)}onClickVerifyOtp(){(0,o.trackEvent)("clicked","verify_with_otp"),this.otpValue=document.getElementById(r.OTP_INPUT_FIELD).value,s.validations.isOtp(this.otpValue)?this.isRegJourney?this.initVerifyOtp():this.verifyOtpForLogin():0==this.otpValue.length?((0,o.trackEvent)("action_failed","otp_verification_error",{"error message":"Please enter OTP"}),this.showInvalidOtpError("Please enter OTP")):((0,o.trackEvent)("action_failed","otp_verification_error",{"error message":"Invalid OTP entered"}),this.showInvalidOtpError("Invalid OTP entered"))}onClickResendOtp(){this.hideResendOtpOptions(),this.initResendTimer(),this.invokeResendOtp(),(0,o.trackEvent)("clicked","resent_otp")}onClickGetOtpOnCall(){this.hideResendOtpOptions(),this.initResendTimer(),this.invokeResendOtp(!0),(0,o.trackEvent)("clicked","get_otp_on_call")}onClickChangeMobile(){this.resetOtpScreen(),this.showRegForm(),(0,o.trackEvent)("clicked","change_number")}onChangeOtpInput(e){e.target.value.length>0?this.showOtpClearBtn():this.hideOtpClearBtn()}onClickOtpClearBtn(){this.hideOtpClearBtn(),document.getElementById(r.OTP_INPUT_FIELD).value=""}setIsRegJourney(e){this.isRegJourney=e}setLoginId(e){this.loginId=e}setChallenge(e){this.challenge=e}setTransactionId(e){this.transactionId=e}setUserInputValue(e){this.userInput=e}setReasonCode(e){this.reasonCode=e,this.updateOtpSentText()}setMobileNum(e){this.mobileNum=e,this.updateMobileNum()}setInviteCode(e){this.inviteCode=e}initResendTimer(){this.resendOtpTimerValue=30,document.getElementById(r.RESEND_OTP_TIMER_DIV).innerHTML="Resend OTP in 00."+this.resendOtpTimerValue,this.startResendOtpTimer()}setFetchOtpResponse(e){this.sendOtpResp=e}initFetchOtp(){n.APIS.getOtpRegStep1(this.mobileNum,this.inviteCode).then((e=>{this.sendOtpResp=e})).catch((e=>{console.error("sendOtpResp",e.message)}))}onClickLoginWithPwd(){this.resetOtpScreen(),this.showPwdForm(this.loginId,this.reasonCode,this.challenge,this.userInput),(0,o.trackEvent)("clicked","login_with_password")}onClickOtpInputField(){(0,o.trackEvent)("clicked","verify_with_otp_shown")}resetOtpScreen(){this.setFieldDataAndTimer(),document.getElementById(r.OTP_INPUT_FIELD).value="";let e=document.getElementById(r.OTP_CLEAR_BTN);this.addCssClass(e,a.HIDE);let t=document.getElementById(r.GET_OTP_ON_CALL_BTN);this.addCssClass(t,a.HIDE);let i=document.getElementById(r.RESEND_OTP_BTN);this.addCssClass(i,a.HIDE);let s=document.getElementById(r.VERIFY_OTP_BOX);this.removeCssClass(s,a.INPUT_ERR_BORDER);let n=document.getElementById(r.INCORRECT_OTP_DIV);this.addCssClass(n,a.HIDE);let o=document.getElementById(r.RESEND_OTP_TIMER_DIV);this.removeCssClass(o,a.HIDE);let d=document.getElementById(r.LOGIN_WITH_PASSWORD);this.addCssClass(d,a.HIDE)}showRegForm(){}showLoginForm(){}showPwdForm(e,t,i,s){}}},460:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(53),n=i(486);var o,r,a;!function(e){e.EMAIL_LABEL="email_label",e.CHANGE_BTN="change_btn",e.PWD_INPUT_BOX="pwd_input_box",e.PWD_INPUT="pwd_input",e.PWD_CLEAR="pwd_clear",e.INCORRECT_PWD="incorrect_pwd",e.FORGOT_PWD="forgot_pwd",e.VERIFY_PWD="verify_pwd",e.LOGIN_WITH_OTP="login_with_otp",e.SHOW_PWD_BTN="show_pwd_btn",e.HIDE_PWD_BTN="hide_pwd_btn"}(o||(o={})),function(e){e.HIDE="hide",e.INPUT_ERR_BORDER="error-border"}(r||(r={})),function(e){e.MEC_WEB="MEC_WEB"}(a||(a={})),t.default=class{constructor(e){this.loginId="",this.reasonCode=-1,this.challenge="",this.pwd="",this.userInput=1,this.channel=null==e?void 0:e.channel}addCssClass(e,t){e.classList.contains(t)||e.classList.add(t)}removeCssClass(e,t){e.classList.contains(t)&&e.classList.remove(t)}setResponsePage(e){this.channel===a.MEC_WEB?window.location.pathname="/mecspa/lobby/":window.location.href=e.responsePage}updateLoginId(){document.getElementById(o.EMAIL_LABEL).innerHTML=this.loginId}showPwdError(e="Incorrect password"){let t=document.getElementById(o.PWD_INPUT_BOX);this.addCssClass(t,r.INPUT_ERR_BORDER);let i=document.getElementById(o.INCORRECT_PWD);this.removeCssClass(i,r.HIDE),i.innerHTML=e}hidePwdError(){let e=document.getElementById(o.PWD_INPUT_BOX);this.removeCssClass(e,r.INPUT_ERR_BORDER);let t=document.getElementById(o.INCORRECT_PWD);this.addCssClass(t,r.HIDE)}verifyPwd(){s.APIS.verifyPassword(this.loginId,this.pwd,this.challenge,this.reasonCode).then((e=>{e.success?this.setResponsePage(e):0==e.success&&120==e.ErrorCode?(this.twoFAData=e.error,this.show2FAPopup()):this.showPwdError(e.ErrorMessage)})).catch((e=>{console.log("verifyPwd",e.message),this.showPwdError()}))}show2FAPopup(){this.twoFAPopup=window.getTwoFactorMobileVerificationInstance({overlayType:2===this.twoFAData.authType?"phone":"otp",mobile:this.twoFAData.mobile||"99xxxxxx21",email:this.twoFAData.email||"sig...@g...com",helpline:this.twoFAData.helpline||null},this.onClickVerify2FA.bind(this),(()=>{}))}showPwdClearBtn(){let e=document.getElementById(o.PWD_CLEAR);this.removeCssClass(e,r.HIDE)}hidePwdClearBtn(){let e=document.getElementById(o.PWD_CLEAR);this.addCssClass(e,r.HIDE)}onClickVerify2FA(e,t){t(),s.APIS.verify2FAOtp(this.twoFAData.authType,e).then((e=>{e.success?this.setResponsePage(e):e.error&&this.twoFAPopup.serverErrorNotifyCallback(e.error.ErrorCode,e.error.ErrorMessage)})).catch((e=>{}))}setLoginId(e){this.loginId=e,this.updateLoginId()}setReasonCode(e){if(this.reasonCode=e,-1!=[602,604].indexOf(this.reasonCode)){let e=document.getElementById(o.LOGIN_WITH_OTP);this.addCssClass(e,r.HIDE)}}setChallenge(e){this.challenge=e}setUserInputValue(e){this.userInput=e}resetForm(){this.hidePwdError();let e=document.getElementById(o.LOGIN_WITH_OTP);this.removeCssClass(e,r.HIDE),document.getElementById(o.PWD_INPUT).value="",this.onClickHidePwd()}onClickChangeBtn(){this.resetForm(),this.showLoginForm()}onClickClearPwd(){this.hidePwdClearBtn(),document.getElementById(o.PWD_INPUT).value=""}onClickForgotPwd(){let e=(0,n.getChannelId)();1==e?(0,n.trackEvent)("clicked","forgot_password_login"):2==e&&(0,n.trackEvent)("clicked","landingScreen/loginForm/forgotPassword"),window.location.href="/player/account/forgot-password.html"}onClickVerifyBtn(){(0,n.trackEvent)("clicked","login_cta"),this.pwd=document.getElementById(o.PWD_INPUT).value,0!=this.pwd.length?(this.hidePwdError(),this.verifyPwd()):this.showPwdError()}onClickLoginWithOtp(){(0,n.trackEvent)("clicked","clicked_on_login_with_otp"),this.resetForm(),this.showLoginWithOtpForm(this.loginId,this.reasonCode,this.challenge)}onClickShowPwd(){document.getElementById(o.PWD_INPUT).type="text";let e=document.getElementById(o.SHOW_PWD_BTN);this.addCssClass(e,r.HIDE);let t=document.getElementById(o.HIDE_PWD_BTN);this.removeCssClass(t,r.HIDE)}onClickHidePwd(){document.getElementById(o.PWD_INPUT).type="password";let e=document.getElementById(o.SHOW_PWD_BTN);this.removeCssClass(e,r.HIDE);let t=document.getElementById(o.HIDE_PWD_BTN);this.addCssClass(t,r.HIDE)}showLoginForm(){}showLoginWithOtpForm(e,t,i){}}},472:function(e,t,i){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ELEM=void 0;const n=i(304),o=i(53),r=s(i(305)),a=i(486),d=i(509);var l,c,h;!function(e){e.MOBILE_INPUT_FIELD="mobile_input",e.GET_STARTED_BTN="getStarted",e.MOBILE_INPUT_BOX="mobile_input_box",e.MSG_INVALID_MOBILE_DIV="msg_invalid_mobile",e.SHOW_INVITE_BTN="show_invite_btn",e.INVITE_CODE_DIV="invite_code_div",e.INVITE_CODE_INPUT="invite_code_input",e.INVITE_CODE_BOX="invite_code_box",e.MSG_INVALID_INVITE_CODE="msg_invalid_invite_code",e.INVITE_CODE_APPLIED="invite_code_applied",e.INVITE_CODE_SPAN="invite_code_span",e.REMOVE_INVITE_CODE="remove_baf_code",e.LOGIN_VIA_OTHER_BTN="login_via_other",e.TITLE_DIV="title_txt",e.MOBILE_PREFIX="mobile_prefix",e.OR_SEPARATOR="or_separator",e.FB_BTN="fb_btn",e.INVITE_CLEAR_BTN="baf_invite_clear_btn",e.MOBILE_INPUT_CLEAR_BTN="mobile_input_clear_btn",e.INVITE_TICK="invite_tick",e.RBD="rbd"}(l=t.ELEM||(t.ELEM={})),function(e){e.HIDE="hide",e.INPUT_ERR_BORDER="error-border",e.INPUT_ERR_BTM_BORDER="error-btmborder"}(c||(c={})),function(e){e.REG_TITLE="LOGIN/SIGNUP",e.SWITCH_TO_LOGIN_TXT="Login using other methods",e.SWITCH_TO_REG_TXT="Login / Register using mobile",e.MOBILE_INPUT_PLACEHOLDER_TXT="Enter Mobile Number",e.EMAIL_INPUT_PLACEHOLDER_TXT="Enter email address / username",e.GET_STARTED_BTN_LABEL="GET STARTED",e.LOGIN_BTN_LABEL="LOGIN",e.INVALID_MOBILE_MSG="Enter a valid Mobile Number",e.INVALID_EMAIL_MSG="Enter a valid Email address / username",e.INVALID_USERNAME_MSG="Enter a valid Username"}(h||(h={}));const E={partnerKey:window.location.host.includes("docker",0)?"mswemf9ae98ab9a464e628f0d5e298932f05f":"dYXsXaf8f6772023a4b2a826b2c834e7ff710",partnerName:"RummyCircle",skipOption:"useanothermethod",lang:"en",privacyUrl:"https://www.rummycircle.com/privacy-policy.html",termsUrl:"https://www.rummycircle.com/tos/terms-of-service.html",btnShape:"rect",ctaColor:"%23ffcb11",ctaTextColor:"%23690101"};t.default=class{constructor(){this.mobileNum="",this.inviteCode="",this.isValidatingInviteCode=!1,this.loginId="",this.isRegJourney=!0}addCssClass(e,t){e.classList.contains(t)||e.classList.add(t)}removeCssClass(e,t){e.classList.contains(t)&&e.classList.remove(t)}showInvalidMobileError(){let e=document.getElementById(l.MOBILE_INPUT_BOX);this.addCssClass(e,c.INPUT_ERR_BORDER);let t=document.getElementById(l.MSG_INVALID_MOBILE_DIV);t.innerHTML=h.INVALID_MOBILE_MSG,this.removeCssClass(t,c.HIDE)}showInvalidEmailError(e=""){let t=document.getElementById(l.MOBILE_INPUT_BOX);this.addCssClass(t,c.INPUT_ERR_BORDER);let i=document.getElementById(l.MSG_INVALID_MOBILE_DIV);i.innerHTML=e.length>0?e:h.INVALID_EMAIL_MSG,this.removeCssClass(i,c.HIDE)}hideInvalidMobileError(){let e=document.getElementById(l.MOBILE_INPUT_BOX);this.removeCssClass(e,c.INPUT_ERR_BORDER);let t=document.getElementById(l.MSG_INVALID_MOBILE_DIV);this.addCssClass(t,c.HIDE)}showInvalidInviteCode(){let e=document.getElementById(l.INVITE_CODE_BOX);this.addCssClass(e,c.INPUT_ERR_BTM_BORDER);let t=document.getElementById(l.MSG_INVALID_INVITE_CODE);this.removeCssClass(t,c.HIDE)}hideInvalidInviteCode(){let e=document.getElementById(l.INVITE_CODE_BOX);this.removeCssClass(e,c.INPUT_ERR_BTM_BORDER);let t=document.getElementById(l.MSG_INVALID_INVITE_CODE);this.addCssClass(t,c.HIDE)}showInviteTick(){this.hideInviteClearBtn();let e=document.getElementById(l.INVITE_TICK);this.removeCssClass(e,c.HIDE)}hideInviteTick(){let e=document.getElementById(l.INVITE_TICK);this.addCssClass(e,c.HIDE)}setInviteCode(e){this.inviteCode=e,this.hideInvalidInviteCode(),this.showInviteTick()}validateInviteCode(e){this.isValidatingInviteCode||(this.isValidatingInviteCode=!0,o.APIS.validateInviteCode(e).then((t=>{t.data&&"success"==t.data.status?(this.setInviteCode(e),d.TCLogin.setRefCode(e)):this.showInvalidInviteCode(),this.isValidatingInviteCode=!1})).catch((e=>{console.log("validate invite code",e.message),this.isValidatingInviteCode=!1})))}switchToLoginJourney(){this.isRegJourney=!1,this.mobileNum="",this.inviteCode="",document.getElementById(l.TITLE_DIV).innerHTML="";let e=document.getElementById(l.SHOW_INVITE_BTN);this.addCssClass(e,c.HIDE),this.hideInvalidInviteCode(),this.hideInviteTick();let t=document.getElementById(l.INVITE_CODE_DIV);this.addCssClass(t,c.HIDE),document.getElementById(l.INVITE_CODE_INPUT).value="";let i=document.getElementById(l.MOBILE_INPUT_FIELD);i.value="",i.placeholder=h.EMAIL_INPUT_PLACEHOLDER_TXT,i.maxLength=50,i.type="email";let s=document.getElementById(l.MOBILE_PREFIX);this.addCssClass(s,c.HIDE),document.getElementById(l.GET_STARTED_BTN).innerHTML=h.LOGIN_BTN_LABEL,document.getElementById(l.LOGIN_VIA_OTHER_BTN).innerHTML=h.SWITCH_TO_REG_TXT;let n=document.getElementById(l.OR_SEPARATOR);this.removeCssClass(n,c.HIDE);let o=document.getElementById(l.FB_BTN);this.removeCssClass(o,c.HIDE),(0,a.trackEvent)("view_displayed","landingscreen/loginform")}switchToRegJourney(){this.isRegJourney=!0,this.loginId="",document.getElementById(l.TITLE_DIV).innerHTML=h.REG_TITLE;let e=document.getElementById(l.SHOW_INVITE_BTN);this.removeCssClass(e,c.HIDE);let t=document.getElementById(l.INVITE_CODE_DIV);this.addCssClass(t,c.HIDE),document.getElementById(l.INVITE_CODE_INPUT).value="";let i=document.getElementById(l.MOBILE_INPUT_FIELD);i.value="",i.placeholder=h.MOBILE_INPUT_PLACEHOLDER_TXT,i.maxLength=10,i.type="tel";let s=document.getElementById(l.MOBILE_PREFIX);this.removeCssClass(s,c.HIDE),document.getElementById(l.GET_STARTED_BTN).innerHTML=h.GET_STARTED_BTN_LABEL,document.getElementById(l.LOGIN_VIA_OTHER_BTN).innerHTML=h.SWITCH_TO_LOGIN_TXT;let n=document.getElementById(l.OR_SEPARATOR);this.addCssClass(n,c.HIDE);let o=document.getElementById(l.FB_BTN);this.addCssClass(o,c.HIDE)}startRegJourney(){if(this.mobileNum=document.getElementById(l.MOBILE_INPUT_FIELD).value,!n.validations.isMobileNumber(this.mobileNum))return 0==this.mobileNum.length?(0,a.trackEvent)("view_displayed","mobile_number_error_shown",{"error message":"empty mobile number"}):(0,a.trackEvent)("view_displayed","mobile_number_error_shown",{"error message":"invalid mobile number"}),void this.showInvalidMobileError();this.resetView(),this.getOtp(this.mobileNum,this.inviteCode)}startLoginJourney(){let e=document.getElementById(l.MOBILE_INPUT_FIELD).value;return 0==e.length?((0,a.trackEvent)("view_displayed","mobile_number_error_shown",{"error message":"empty email"}),void this.showInvalidEmailError("Please enter your Email ID / Username")):-1==e.indexOf("@")||n.validations.isEmail(e)?(this.loginId=e,this.resetView(),void this.fetchOtpForLogin()):((0,a.trackEvent)("view_displayed","mobile_number_error_shown",{"error message":"invalid email"}),void this.showInvalidEmailError("Please enter a valid Email ID"))}fetchOtpForLogin(){o.APIS.getOtpLoginStep1(this.loginId).then((e=>{e.success?-1==[602,604].indexOf(e.data.reasonCode)?this.showOtpScreenForLogin(this.loginId,e.data.reasonCode,e.data.challenge,e.data.transactionId,e.data.userInput):this.showPasswordScreen(this.loginId,e.data.reasonCode,e.data.challenge,e.data.userInput):401==e.ErrorCode&&3==e.data.reasonCode?this.showInvalidEmailError("Email/username does not exist. Kindly register with mobile"):this.showInvalidEmailError(e.ErrorMessage)})).catch((e=>{console.log("fetchOtpForLogin",e.message),this.showInvalidEmailError(e.message)}))}showInviteClearBtn(){let e=document.getElementById(l.INVITE_CLEAR_BTN);this.removeCssClass(e,c.HIDE)}hideInviteClearBtn(){let e=document.getElementById(l.INVITE_CLEAR_BTN);this.addCssClass(e,c.HIDE)}showMobileInputClearBtn(){let e=document.getElementById(l.MOBILE_INPUT_CLEAR_BTN);this.removeCssClass(e,c.HIDE)}hideMobileInputClearBtn(){let e=document.getElementById(l.MOBILE_INPUT_CLEAR_BTN);this.addCssClass(e,c.HIDE)}onClickShowInviteCodeField(){let e=document.getElementById(l.SHOW_INVITE_BTN);this.addCssClass(e,c.HIDE);let t=document.getElementById(l.INVITE_CODE_DIV);this.removeCssClass(t,c.HIDE)}onInviteCodeChange(e){this.hideInviteTick(),this.hideInvalidInviteCode();let t=e.target.value,i=t.length;i>0?this.showInviteClearBtn():this.hideInviteClearBtn(),8==i&&this.validateInviteCode(t)}onClickClearInvite(){this.hideInviteClearBtn(),this.hideInvalidInviteCode(),document.getElementById(l.INVITE_CODE_INPUT).value=""}onChangeMobileInput(e){e.target.value.length>0?this.showMobileInputClearBtn():this.hideMobileInputClearBtn()}onClickClearMobileInput(){this.hideMobileInputClearBtn(),document.getElementById(l.MOBILE_INPUT_FIELD).value=""}onClickRemoveInviteCode(){this.inviteCode="";let e=document.getElementById(l.INVITE_CODE_APPLIED);this.addCssClass(e,c.HIDE);let t=document.getElementById(l.SHOW_INVITE_BTN);this.removeCssClass(t,c.HIDE)}onClickGetStarted(){this.isRegJourney?(this.startRegJourney(),(0,a.trackEvent)("clicked","landingScreen/registrationForm/registrationButton")):(this.startLoginJourney(),(0,a.trackEvent)("clicked","landingscreen/loginform/login_button"))}onClickLoginViaOther(){this.resetView(),this.isRegJourney?(this.switchToLoginJourney(),(0,a.trackEvent)("clicked","existing_user_click_here")):(this.switchToRegJourney(),(0,a.trackEvent)("clicked","get_started_with_mobile"))}onClickMobileInput(){this.isRegJourney?(0,a.trackEvent)("clicked","landingScreen/registrationForm/mobile"):(0,a.trackEvent)("clicked","landingscreen/loginform/username")}resetView(){this.hideInvalidMobileError()}initFbLib(){this.FBLogin=new r.default,this.FBLogin.init()}initTcLogin(){let e=document.querySelector('[data-truecallerLogin="enable"]');if(e){const t=new d.TCLogin(E,e);t.isAndroidDevice&&t.init()}}getOtp(e,t){}showOtpScreenForLogin(e,t,i,s,n){}showPasswordScreen(e,t,i,s){}hideVerifyOtpScreen(){}hidePasswordScreen(){}}},744:function(e,t,i){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Registration=void 0;const n=s(i(870)),o=s(i(676)),r=s(i(628)),a=s(i(68)),d=i(486),l=i(53);var c;!function(e){let t,i,s;!function(e){e.REG_FORM_DIV="paj-regform",e.LOGIN_FORM_DIV="paj-loginform",e.OTP_FORM="paj-verifyform",e.PASSWORD_FORM="lwp-verifyform"}(t||(t={})),function(e){e.FORGOT_PWD="forgot-password"}(i||(i={})),function(e){e.HIDE="hide"}(s||(s={}));let c=new n.default,h=new o.default,E=new r.default,_=new a.default;function m(){l.APIS.checkLogin().then((e=>{e.loggedIn?(console.log("CheckLogin: User is logged In"),window.location.pathname="/mecspa/lobby/"):(console.log("CheckLogin: Not logged In"),u(),I(),p(),g())})).catch((e=>{console.log("Check login error: ",e),u(),I(),p(),g()}))}function u(){D({}),c.getOtp=v,c.showOtpScreenForLogin=C,c.showPasswordScreen=b,c.hideVerifyOtpScreen=w,c.hidePasswordScreen=f,c.init()}function I(){h.showRegForm=O,h.showLoginForm=y,h.showPwdForm=B,h.init()}function p(){E.showLoginForm=y,E.showLoginWithOtpForm=L,E.init()}function g(){_.init()}function O(){w(),N(document.getElementById(t.REG_FORM_DIV),s.HIDE),(0,d.trackEvent)("view_displayed","registration_screen_loaded")}function T(){P(document.getElementById(t.REG_FORM_DIV),s.HIDE)}function C(e,i,n,o,r){T(),P(document.getElementById(t.LOGIN_FORM_DIV),s.HIDE),h.setIsRegJourney(!1),h.setLoginId(e),h.setChallenge(n),h.setTransactionId(o),h.setUserInputValue(r),h.setReasonCode(i),h.resetOtpScreen(),h.initResendTimer(),N(document.getElementById(t.OTP_FORM),s.HIDE),(0,d.trackEvent)("view_displayed","verify_with_otp_screen_shown",{otp_initiation_point:"login_screen"})}function v(e,i){l.APIS.getOtpRegStep1(e,i).then((n=>{n.success?(h.setFetchOtpResponse(n),function(e,i){T(),h.setIsRegJourney(!0),h.setMobileNum(e),h.setInviteCode(i),h.initResendTimer(),N(document.getElementById(t.OTP_FORM),s.HIDE),h.hidePasswordLink(),(0,d.trackEvent)("view_displayed","verify_with_otp_screen_shown",{otp_initiation_point:"registration_screen"})}(e,i)):n.ErrorMessage&&n.ErrorMessage.length>0&&c.showRegError(n.ErrorMessage)})).catch((e=>{console.error("error in getOtp: ",e)}))}function w(){P(document.getElementById(t.OTP_FORM),s.HIDE)}function R(){E.resetForm(),N(document.getElementById(t.PASSWORD_FORM),s.HIDE)}function B(e,t,i,s){w(),E.setChallenge(i),E.setReasonCode(t),E.setLoginId(e),E.setUserInputValue(s),R(),(0,d.trackEvent)("view_displayed","login_with_password_shown")}function b(e,i,n,o){T(),E.setChallenge(n),E.setReasonCode(i),E.setLoginId(e),E.setUserInputValue(o),N(document.getElementById(t.PASSWORD_FORM),s.HIDE),(0,d.trackEvent)("view_displayed","login_with_password_shown")}function L(e,i,n){P(document.getElementById(t.PASSWORD_FORM),s.HIDE),h.setIsRegJourney(!1),h.setLoginId(e),h.setChallenge(n),h.setReasonCode(i),h.initResendTimer(),h.showPasswordLink(),N(document.getElementById(t.OTP_FORM),s.HIDE),(0,d.trackEvent)("view_displayed","verify_with_otp_screen_shown",{otp_initiation_point:"login_screen"})}function y(){f(),w(),N(document.getElementById(t.LOGIN_FORM_DIV),s.HIDE),(0,d.trackEvent)("view_displayed","login_screen_loaded")}function f(){P(document.getElementById(t.PASSWORD_FORM),s.HIDE)}function P(e,t){e.classList.contains(t)||e.classList.add(t)}function N(e,t){e.classList.contains(t)&&e.classList.remove(t)}function D(e){const{oldURL:t}=e;switch(window.location.hash){case"#login":c.switchToLoginJourney();break;case"#register":c.switchToRegJourney();break;case"#forgot-password":T(),_.initCaptcha(),f(),N(document.getElementById("forgot-password-form"),s.HIDE);break;case"":!function(e){e&&e.includes(i.FORGOT_PWD)&&(P(document.getElementById("forgot-password-form"),s.HIDE),R())}(t)}}e.onLoadInit=function(){var e=function(){window.removeEventListener("unload",e,!1),window.removeEventListener("hashchange",D,!1)};window.addEventListener("load",m),window.addEventListener("unload",e,!1),window.addEventListener("hashchange",D,!1)}}(c=t.Registration||(t.Registration={})),c.onLoadInit()},68:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=i(53),n=i(304);var o,r;!function(e){e.FORGOT_PASSWORD_FORM_CONT="forgot-password-form",e.PWD_FORM_SEND_CTA="pwd-form-send-cta",e.CAPTCHA_IMG="captcha-img",e.FORGOT_PWD_EMAIL_ERROR="forgot-password-email-error",e.FORGOT_PWD_CAPTCHA_ERROR="forgot-password-captcha-error",e.FORGOT_PWD_ALERT_WARN="forgot-password-alert-warning",e.FORGOT_PWD_ALERT_SUCCESS="forgot-password-alert-success"}(o||(o={})),function(e){e.CAPTCHA_EMPTY="Please enter a Captcha",e.INVALID_CREDS="Invalid Username/Email or Password.",e.ACCOUNT_CLOSED="Account has been closed. Check your email. For further information, contact fairplay@rummycircle.com",e.EMAIL_NOT_EXIST="Entered email id is not registered with us.",e.INVALID_CAPTCHA="Captcha Validation Failed! Please try again."}(r||(r={})),t.default=class{constructor(){this.hideElement=function(e){e.style.display="none"},this.showElement=function(e,t){e.style.display=t||"block"}}init(){this.assignEventListeners()}assignEventListeners(){document.getElementById(o.PWD_FORM_SEND_CTA).addEventListener("click",this.handleForgotPasswordSubmit.bind(this))}initCaptcha(){s.APIS.getCaptcha().then((e=>{document.getElementById(o.CAPTCHA_IMG).src=e})).catch((e=>{console.log(e)}))}markErrorField(e,t,i,s){i.innerText=s,e[t].parentElement.classList.add("error")}handleForgotPasswordSubmit(e){const t=document.getElementById(o.FORGOT_PASSWORD_FORM_CONT);var i={email:t.email.value,captcha_response:t.captcha_response.value},a={email:document.getElementById(o.FORGOT_PWD_EMAIL_ERROR),captcha_response:document.getElementById(o.FORGOT_PWD_CAPTCHA_ERROR)},d=document.getElementById(o.FORGOT_PWD_ALERT_WARN),l=document.getElementById(o.FORGOT_PWD_ALERT_SUCCESS);this.hideElement(d),this.hideElement(l),Object.keys(i).forEach((function(e){t[e].parentElement.classList.remove("error")}));var c=!1,h=n.validations.getErrorMsgForEmail(i.email),E=i.captcha_response?"":r.CAPTCHA_EMPTY;h&&(this.markErrorField(t,"email",a.email,h),c=!0),E&&(this.markErrorField(t,"captcha_response",a.captcha_response,E),c=!0),this.hideElement(d),this.hideElement(l),c||s.APIS.resetPwd(i).then((e=>{if(e.errorCode)this.showElement(d),d.querySelector("span").innerText=e.errorMessage;else if(e.captchaValid&&e.emailValid)this.showElement(l);else{this.showElement(d);var t="";e.captchaValid?e.emailValid||(this.initCaptcha(),t=r.EMAIL_NOT_EXIST):(t=r.INVALID_CAPTCHA,document.getElementById(o.CAPTCHA_IMG).src=e.imageUrl),d.querySelector("span").innerText=t}})).catch((e=>{console.log(e)}))}}},676:function(e,t,i){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=s(i(104)),o=i(486);var r,a;!function(e){e.OTP_FORM_MOBILE_ELEMENT="verify_otp_for_mobile",e.VERIFY_OTP_BTN="verifyOtp",e.OTP_CLEAR_BTN="otp_clear_btn",e.CHANGE_BTN="changeCTA",e.RESEND_OTP_TIMER="resend_otp_timer",e.OTP_INPUT_FIELD="otpInputField",e.GET_OTP_ON_CALL_BTN="get_opt_call_btn",e.INCORRECT_OTP_DIV="msg_invalid_otp",e.VERIFY_OTP_BOX="verify_otp_box",e.RESEND_OTP_BTN="resend_otp_btn",e.RESEND_OTP_BTN_CONT="resend_otp_btn_container",e.OTP_SENT_TXT="otp_sent_txt",e.LOGIN_WITH_PASSWORD_CTA="login_with_password_cta",e.LOGIN_WITH_PASSWORD="login_with_password",e.RESEND_OTP_TIMER_DIV="resend_otp_timer"}(r||(r={})),function(e){e.HIDE="hide",e.INPUT_ERR_BORDER="error-border"}(a||(a={}));class d extends n.default{constructor(){super({channel:"MEC_WEB"})}init(){this.assignEventListeners()}assignEventListeners(){document.getElementById(r.OTP_INPUT_FIELD).addEventListener("input",this.checkOtpLength.bind(this)),document.getElementById(r.VERIFY_OTP_BTN).addEventListener("click",this.validateAndInitiateVerifyOtp.bind(this)),document.getElementById(r.CHANGE_BTN).addEventListener("click",this.onClickChangeCTA.bind(this)),document.getElementById(r.RESEND_OTP_BTN).addEventListener("click",this.onClickResendOtp.bind(this)),document.getElementById(r.LOGIN_WITH_PASSWORD_CTA).addEventListener("click",this.onClickLoginWithPwd.bind(this))}resetOtpScreen(){document.getElementById(r.OTP_INPUT_FIELD).value="";let e=document.getElementById(r.VERIFY_OTP_BOX);this.removeCssClass(e,a.INPUT_ERR_BORDER);let t=document.getElementById(r.INCORRECT_OTP_DIV);this.addCssClass(t,a.HIDE);let i=document.getElementById(r.RESEND_OTP_BTN_CONT);this.addCssClass(i,a.HIDE)}hidePasswordLink(){let e=document.getElementById(r.LOGIN_WITH_PASSWORD);this.addCssClass(e,a.HIDE)}showPasswordLink(){let e=document.getElementById(r.LOGIN_WITH_PASSWORD);this.removeCssClass(e,a.HIDE)}onClickChangeCTA(){this.resetOtpScreen(),this.setFieldDataAndTimer(),this.isRegJourney?this.showRegForm():this.showLoginForm()}initResendTimer(){document.getElementById(r.OTP_INPUT_FIELD).value="",this.hideResendOtpOptions(),this.resendOtpTimerValue=30,this.startResendOtpTimer()}startResendOtpTimer(){null!=this.resendOtpTimer&&clearTimeout(this.resendOtpTimer);let e=document.getElementById(r.RESEND_OTP_TIMER_DIV);this.resendOtpTimer=setTimeout((()=>{this.resendOtpTimerValue--,this.resendOtpTimerValue>0?(e.innerHTML="Resend OTP in "+this.resendOtpTimerValue+"s",this.startResendOtpTimer()):(this.resendOtpTimer=null,this.showResendOtpOptions())}),1e3)}showResendOtpOptions(){let e=document.getElementById(r.RESEND_OTP_TIMER_DIV);this.addCssClass(e,a.HIDE);let t=document.getElementById(r.RESEND_OTP_BTN_CONT);this.removeCssClass(t,a.HIDE)}onClickResendOtp(){this.initResendTimer(),this.invokeResendOtp()}hideResendOtpOptions(){let e=document.getElementById(r.RESEND_OTP_TIMER_DIV);this.removeCssClass(e,a.HIDE);let t=document.getElementById(r.RESEND_OTP_BTN_CONT);this.addCssClass(t,a.HIDE)}onClickLoginWithPwd(){this.resetOtpScreen(),this.clearTimerAndSendResp(),this.showPwdForm(this.loginId,this.reasonCode,this.challenge,this.userInput)}checkOtpLength(){let e=document.getElementById(r.OTP_INPUT_FIELD);return e.value.length<6?(e.value.length>0&&!e.value.match(/\d+$/)&&(e.value=e.value.slice(0,e.value.length-1)),!1):e.value.length>6?(e.value=e.value.slice(0,6),e.value.match(/\d{6}/)):e.value.match(/\d{6}/)}validateAndInitiateVerifyOtp(){this.checkOtpLength()?this.onClickVerifyOtp():(this.showInvalidOtpError("Please enter 6 digit OTP"),(0,o.trackEvent)("action_failed","otp_verification_error",{"error message":"Please enter 6 digit OTP"}))}}t.default=d},628:function(e,t,i){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=s(i(460));var o,r;!function(e){e.EMAIL_LABEL="email_label",e.CHANGE_BTN="change_btn",e.PWD_INPUT_BOX="pwd_input_box",e.PWD_INPUT="pwd_input",e.PWD_CLEAR="pwd_clear",e.INCORRECT_PWD="incorrect_pwd",e.FORGOT_PWD="forgot_pwd",e.VERIFY_PWD="verify_pwd",e.LOGIN_WITH_OTP="login_with_otp",e.SHOW_PWD_BTN="show_pwd_btn",e.HIDE_PWD_BTN="hide_pwd_btn"}(o||(o={})),function(e){e.HIDE="hide",e.INPUT_ERR_BORDER="error-border"}(r||(r={}));class a extends n.default{constructor(){super({channel:"MEC_WEB"})}init(){this.assignEventListeners()}assignEventListeners(){document.getElementById(o.FORGOT_PWD).addEventListener("click",this.onClickForgotPwd.bind(this)),document.getElementById(o.VERIFY_PWD).addEventListener("click",this.onClickVerifyBtn.bind(this)),document.getElementById(o.LOGIN_WITH_OTP).addEventListener("click",this.onClickLoginWithOtp.bind(this)),document.getElementById(o.SHOW_PWD_BTN).addEventListener("click",this.onClickShowPwd.bind(this)),document.getElementById(o.HIDE_PWD_BTN).addEventListener("click",this.onClickHidePwd.bind(this))}updateLoginId(){document.getElementById(o.EMAIL_LABEL).innerHTML=this.loginId}setLoginId(e){this.loginId=e}resetForm(){this.hidePwdError();let e=document.getElementById(o.LOGIN_WITH_OTP);this.removeCssClass(e,r.HIDE),document.getElementById(o.PWD_INPUT).value="",this.onClickHidePwd()}onClickForgotPwd(){window.location.hash="#forgot-password"}onClickLoginWithOtp(){this.resetForm(),this.showLoginWithOtpForm(this.loginId,this.reasonCode,this.challenge)}onClickShowPwd(){document.getElementById(o.PWD_INPUT).type="text";let e=document.getElementById(o.SHOW_PWD_BTN);this.addCssClass(e,r.HIDE);let t=document.getElementById(o.HIDE_PWD_BTN);this.removeCssClass(t,r.HIDE)}onClickHidePwd(){document.getElementById(o.PWD_INPUT).type="password";let e=document.getElementById(o.SHOW_PWD_BTN);this.removeCssClass(e,r.HIDE);let t=document.getElementById(o.HIDE_PWD_BTN);this.addCssClass(t,r.HIDE)}}t.default=a},870:function(e,t,i){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=i(486),o=s(i(472)),r=i(486),a=i(304),d=i(53);var l,c,h,E;!function(e){e.REG_FORM_CONT="paj-regform",e.LOGIN_FORM_CONT="paj-loginform",e.MOBILE_INPUT_FIELD="mobile_input",e.EMAIL_INPUT_FIELD="email_input_field",e.REGISTER_CTA="registerCTA",e.LOGIN_CTA="loginCTA",e.MOBILE_INPUT_BOX="mobile_input_box",e.EMAIL_INPUT_BOX="email_input_box",e.MSG_INVALID_MOBILE="msg_invalid_mobile",e.MSG_INVALID_EMAIL="msg_invalid_email",e.SHOW_INVITE_BTN="show_invite_btn",e.INVITE_CODE_DIV="invite_code_div",e.INVITE_CODE_INPUT="invite_code_input",e.INVITE_CODE_BOX="invite_code_box",e.MSG_INVALID_INVITE_CODE="msg_invalid_invite_code",e.INVITE_CODE_APPLIED="invite_code_applied",e.INVITE_CODE_SPAN="invite_code_span",e.REMOVE_INVITE_CODE="remove_baf_code",e.LOGIN_VIA_OTHER_BTN="login_via_other",e.LOGIN_VIA_MOBILE="login_via_mobile",e.TITLE_DIV="title_txt",e.MOBILE_PREFIX="mobile_prefix",e.OR_SEPARATOR="or_separator",e.FB_BTN="fb_btn",e.INVITE_CLEAR_BTN="baf_invite_clear_btn",e.MOBILE_INPUT_CLEAR_BTN="mobile_input_clear_btn",e.EMAIL_INPUT_CLEAR_BTN="email_input_clear_btn",e.INVITE_TICK="invite_tick"}(l||(l={})),function(e){e.HIDE="hide",e.INPUT_ERR_BORDER="error-border",e.INPUT_ERR_BTM_BORDER="error-btmborder"}(c||(c={})),function(e){e.REG_TITLE="LOGIN/SIGNUP",e.SWITCH_TO_LOGIN_TXT="Login using other methods",e.SWITCH_TO_REG_TXT="Login / Register using mobile",e.MOBILE_INPUT_PLACEHOLDER_TXT="Enter Mobile Number",e.EMAIL_INPUT_PLACEHOLDER_TXT="Enter email address / username",e.GET_STARTED_BTN_LABEL="GET STARTED",e.LOGIN_BTN_LABEL="LOGIN",e.INVALID_MOBILE_MSG="Enter a valid Mobile Number",e.INVALID_EMAIL_MSG="Enter a valid Email address / username",e.INVALID_USERNAME_MSG="Enter a valid Username"}(h||(h={})),function(e){e.LOGIN="#login",e.REGISTER="#register"}(E||(E={}));class _ extends o.default{constructor(){super()}init(){this.checkIsRegJourney(),this.assignEventListeners(),this.isRegJourney?(0,r.trackEvent)("view_displayed","registration_screen_loaded"):(this.switchToLoginJourney(),(0,r.trackEvent)("view_displayed","login_screen_loaded"))}checkIsRegJourney(){window.location.hash===E.LOGIN||-1!=window.location.search.indexOf("source=logout")&&1==(0,n.getChannelId)()?this.isRegJourney=!1:this.isRegJourney=!0}assignEventListeners(){document.getElementById(l.REGISTER_CTA).addEventListener("click",this.onContinueClick.bind(this)),document.getElementById(l.LOGIN_CTA).addEventListener("click",this.onContinueClick.bind(this)),document.getElementById(l.LOGIN_VIA_OTHER_BTN).addEventListener("click",this.onClickLoginViaOther.bind(this)),document.getElementById(l.LOGIN_VIA_MOBILE).addEventListener("click",this.onClickLoginViaOther.bind(this)),document.getElementById(l.MOBILE_INPUT_FIELD).addEventListener("input",this.onChangeMobileInput.bind(this)),document.getElementById(l.MOBILE_INPUT_CLEAR_BTN).addEventListener("click",this.onClickClearMobileInput.bind(this)),document.getElementById(l.EMAIL_INPUT_FIELD).addEventListener("input",this.onChangeEmailInput.bind(this)),document.getElementById(l.EMAIL_INPUT_CLEAR_BTN).addEventListener("click",this.onClickClearEmailInput.bind(this))}onContinueClick(){this.isRegJourney?this.startRegJourney():this.startLoginJourney()}onClickLoginViaOther(){this.isRegJourney?this.switchToLoginJourney():this.switchToRegJourney()}onClickClearEmailInput(){this.hideEmailInputClearBtn(),document.getElementById(l.EMAIL_INPUT_FIELD).value=""}showEmailInputClearBtn(){let e=document.getElementById(l.EMAIL_INPUT_CLEAR_BTN);this.removeCssClass(e,c.HIDE)}hideEmailInputClearBtn(){let e=document.getElementById(l.EMAIL_INPUT_CLEAR_BTN);this.addCssClass(e,c.HIDE)}onChangeEmailInput(e){e.target.value.length>0?this.showEmailInputClearBtn():this.hideEmailInputClearBtn()}hideForgotPwdView(){let e=document.getElementById("forgot-password-form");this.addCssClass(e,c.HIDE)}resetView(){let e=document.getElementById(l.MOBILE_INPUT_BOX);this.removeCssClass(e,c.INPUT_ERR_BORDER);let t=document.getElementById(l.EMAIL_INPUT_BOX);this.removeCssClass(t,c.INPUT_ERR_BORDER);let i=document.getElementById(l.MSG_INVALID_MOBILE),s=document.getElementById(l.MSG_INVALID_EMAIL);this.addCssClass(i,c.HIDE),this.addCssClass(s,c.HIDE),this.hideVerifyOtpScreen(),this.hidePasswordScreen(),this.hideForgotPwdView()}switchToLoginJourney(){this.resetView(),this.isRegJourney=!1,this.mobileNum="";let e=document.getElementById(l.REG_FORM_CONT);this.addCssClass(e,c.HIDE);let t=document.getElementById(l.LOGIN_FORM_CONT);this.removeCssClass(t,c.HIDE);let i=document.getElementById(l.MOBILE_INPUT_FIELD);i.value="",i.placeholder=h.EMAIL_INPUT_PLACEHOLDER_TXT,i.maxLength=50,i.type="email",window.location.hash=E.LOGIN}switchToRegJourney(){this.resetView(),this.isRegJourney=!0,this.loginId="";let e=document.getElementById(l.LOGIN_FORM_CONT);this.addCssClass(e,c.HIDE);let t=document.getElementById(l.REG_FORM_CONT);this.removeCssClass(t,c.HIDE);let i=document.getElementById(l.MOBILE_INPUT_FIELD);i.value="",i.placeholder=h.MOBILE_INPUT_PLACEHOLDER_TXT,i.maxLength=10,i.type="tel",(0,r.trackEvent)("view_displayed","registration_screen_loaded"),window.location.hash=E.REGISTER}startRegJourney(){if(this.mobileNum=document.getElementById(l.MOBILE_INPUT_FIELD).value,!a.validations.isMobileNumber(this.mobileNum))return 0==this.mobileNum.length?(0,r.trackEvent)("view_displayed","empty_mobile"):(0,r.trackEvent)("view_displayed","invalid_mobile"),void this.showInvalidMobileError();this.resetView(),this.getOtp(this.mobileNum,this.inviteCode)}startLoginJourney(){let e=document.getElementById(l.EMAIL_INPUT_FIELD).value;if(0==e.length)return(0,r.trackEvent)("action_failed","login_failed",{error_message:"Please enter your Email ID / Username"}),void this.showInvalidEmailError("Please enter your Email ID / Username");a.validations.isMobileNumber(e)?(0,r.trackEvent)("clicked","clicked_on_login_button",{loginType:"mobile"}):(0,r.trackEvent)("clicked","clicked_on_login_button",{loginType:"email_or_username"}),this.loginId=e,this.resetView(),this.fetchOtpForLogin()}fetchOtpForLogin(){d.APIS.getOtpLoginStep1(this.loginId).then((e=>{if(e.success)-1==[602,604].indexOf(e.data.reasonCode)?this.showOtpScreenForLogin(this.loginId,e.data.reasonCode,e.data.challenge,e.data.transactionId,e.data.userInput):this.showPasswordScreen(this.loginId,e.data.reasonCode,e.data.challenge,e.data.userInput);else{let t="";t=401==e.ErrorCode&&3==e.data.reasonCode?"Email/username does not exist. Kindly register with mobile":e.ErrorMessage||"Unable to login",this.showInvalidEmailError(t),(0,r.trackEvent)("action_failed","login_failed",{error_message:t})}})).catch((e=>{console.log("fetchOtpForLogin",e.message),this.showInvalidEmailError(e.message)}))}showInvalidEmailError(e=""){let t=document.getElementById(l.EMAIL_INPUT_BOX);this.addCssClass(t,c.INPUT_ERR_BORDER);let i=document.getElementById(l.MSG_INVALID_EMAIL);i.innerHTML=e.length>0?e:h.INVALID_EMAIL_MSG,this.removeCssClass(i,c.HIDE)}showInvalidMobileError(){let e=document.getElementById(l.MOBILE_INPUT_BOX);this.addCssClass(e,c.INPUT_ERR_BORDER);let t=document.getElementById(l.MSG_INVALID_MOBILE);this.removeCssClass(t,c.HIDE),t.innerHTML=h.INVALID_MOBILE_MSG}showRegError(e){let t=document.getElementById(l.MOBILE_INPUT_BOX);this.addCssClass(t,c.INPUT_ERR_BORDER);let i=document.getElementById(l.MSG_INVALID_MOBILE);this.removeCssClass(i,c.HIDE),i.innerHTML=e}}t.default=_},238:function(e,t,i){var s;!function(n,o){"use strict";var r="function",a="undefined",d="object",l="string",c="model",h="name",E="type",_="vendor",m="version",u="architecture",I="console",p="mobile",g="tablet",O="smarttv",T="wearable",C="embedded",v="Amazon",w="Apple",R="ASUS",B="BlackBerry",b="Google",L="Huawei",y="LG",f="Microsoft",P="Motorola",N="Samsung",D="Sony",S="Xiaomi",M="Zebra",k="Facebook",A=function(e){for(var t={},i=0;i<e.length;i++)t[e[i].toUpperCase()]=e[i];return t},F=function(e,t){return typeof e===l&&-1!==H(t).indexOf(H(e))},H=function(e){return e.toLowerCase()},U=function(e,t){if(typeof e===l)return e=e.replace(/^\s\s*/,"").replace(/\s\s*$/,""),typeof t===a?e:e.substring(0,255)},V=function(e,t){for(var i,s,n,a,l,c,h=0;h<t.length&&!l;){var E=t[h],_=t[h+1];for(i=s=0;i<E.length&&!l;)if(l=E[i++].exec(e))for(n=0;n<_.length;n++)c=l[++s],typeof(a=_[n])===d&&a.length>0?2===a.length?typeof a[1]==r?this[a[0]]=a[1].call(this,c):this[a[0]]=a[1]:3===a.length?typeof a[1]!==r||a[1].exec&&a[1].test?this[a[0]]=c?c.replace(a[1],a[2]):o:this[a[0]]=c?a[1].call(this,c,a[2]):o:4===a.length&&(this[a[0]]=c?a[3].call(this,c.replace(a[1],a[2])):o):this[a]=c||o;h+=2}},x=function(e,t){for(var i in t)if(typeof t[i]===d&&t[i].length>0){for(var s=0;s<t[i].length;s++)if(F(t[i][s],e))return"?"===i?o:i}else if(F(t[i],e))return"?"===i?o:i;return e},W={ME:"4.90","NT 3.11":"NT3.51","NT 4.0":"NT4.0",2e3:"NT 5.0",XP:["NT 5.1","NT 5.2"],Vista:"NT 6.0",7:"NT 6.1",8:"NT 6.2",8.1:"NT 6.3",10:["NT 6.4","NT 10.0"],RT:"ARM"},G={browser:[[/\b(?:crmo|crios)\/([\w\.]+)/i],[m,[h,"Chrome"]],[/edg(?:e|ios|a)?\/([\w\.]+)/i],[m,[h,"Edge"]],[/(opera mini)\/([-\w\.]+)/i,/(opera [mobiletab]{3,6})\b.+version\/([-\w\.]+)/i,/(opera)(?:.+version\/|[\/ ]+)([\w\.]+)/i],[h,m],[/opios[\/ ]+([\w\.]+)/i],[m,[h,"Opera Mini"]],[/\bopr\/([\w\.]+)/i],[m,[h,"Opera"]],[/(kindle)\/([\w\.]+)/i,/(lunascape|maxthon|netfront|jasmine|blazer)[\/ ]?([\w\.]*)/i,/(avant |iemobile|slim)(?:browser)?[\/ ]?([\w\.]*)/i,/(ba?idubrowser)[\/ ]?([\w\.]+)/i,/(?:ms|\()(ie) ([\w\.]+)/i,/(flock|rockmelt|midori|epiphany|silk|skyfire|ovibrowser|bolt|iron|vivaldi|iridium|phantomjs|bowser|quark|qupzilla|falkon|rekonq|puffin|brave|whale|qqbrowserlite|qq)\/([-\w\.]+)/i,/(weibo)__([\d\.]+)/i],[h,m],[/(?:\buc? ?browser|(?:juc.+)ucweb)[\/ ]?([\w\.]+)/i],[m,[h,"UCBrowser"]],[/\bqbcore\/([\w\.]+)/i],[m,[h,"WeChat(Win) Desktop"]],[/micromessenger\/([\w\.]+)/i],[m,[h,"WeChat"]],[/konqueror\/([\w\.]+)/i],[m,[h,"Konqueror"]],[/trident.+rv[: ]([\w\.]{1,9})\b.+like gecko/i],[m,[h,"IE"]],[/yabrowser\/([\w\.]+)/i],[m,[h,"Yandex"]],[/(avast|avg)\/([\w\.]+)/i],[[h,/(.+)/,"$1 Secure Browser"],m],[/\bfocus\/([\w\.]+)/i],[m,[h,"Firefox Focus"]],[/\bopt\/([\w\.]+)/i],[m,[h,"Opera Touch"]],[/coc_coc\w+\/([\w\.]+)/i],[m,[h,"Coc Coc"]],[/dolfin\/([\w\.]+)/i],[m,[h,"Dolphin"]],[/coast\/([\w\.]+)/i],[m,[h,"Opera Coast"]],[/miuibrowser\/([\w\.]+)/i],[m,[h,"MIUI Browser"]],[/fxios\/([-\w\.]+)/i],[m,[h,"Firefox"]],[/\bqihu|(qi?ho?o?|360)browser/i],[[h,"360 Browser"]],[/(oculus|samsung|sailfish)browser\/([\w\.]+)/i],[[h,/(.+)/,"$1 Browser"],m],[/(comodo_dragon)\/([\w\.]+)/i],[[h,/_/g," "],m],[/(electron)\/([\w\.]+) safari/i,/(tesla)(?: qtcarbrowser|\/(20\d\d\.[-\w\.]+))/i,/m?(qqbrowser|baiduboxapp|2345Explorer)[\/ ]?([\w\.]+)/i],[h,m],[/(metasr)[\/ ]?([\w\.]+)/i,/(lbbrowser)/i],[h],[/((?:fban\/fbios|fb_iab\/fb4a)(?!.+fbav)|;fbav\/([\w\.]+);)/i],[[h,k],m],[/safari (line)\/([\w\.]+)/i,/\b(line)\/([\w\.]+)\/iab/i,/(chromium|instagram)[\/ ]([-\w\.]+)/i],[h,m],[/\bgsa\/([\w\.]+) .*safari\//i],[m,[h,"GSA"]],[/headlesschrome(?:\/([\w\.]+)| )/i],[m,[h,"Chrome Headless"]],[/ wv\).+(chrome)\/([\w\.]+)/i],[[h,"Chrome WebView"],m],[/droid.+ version\/([\w\.]+)\b.+(?:mobile safari|safari)/i],[m,[h,"Android Browser"]],[/(chrome|omniweb|arora|[tizenoka]{5} ?browser)\/v?([\w\.]+)/i],[h,m],[/version\/([\w\.]+) .*mobile\/\w+ (safari)/i],[m,[h,"Mobile Safari"]],[/version\/([\w\.]+) .*(mobile ?safari|safari)/i],[m,h],[/webkit.+?(mobile ?safari|safari)(\/[\w\.]+)/i],[h,[m,x,{"1.0":"/8",1.2:"/1",1.3:"/3","2.0":"/412","2.0.2":"/416","2.0.3":"/417","2.0.4":"/419","?":"/"}]],[/(webkit|khtml)\/([\w\.]+)/i],[h,m],[/(navigator|netscape\d?)\/([-\w\.]+)/i],[[h,"Netscape"],m],[/mobile vr; rv:([\w\.]+)\).+firefox/i],[m,[h,"Firefox Reality"]],[/ekiohf.+(flow)\/([\w\.]+)/i,/(swiftfox)/i,/(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror|klar)[\/ ]?([\w\.\+]+)/i,/(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([-\w\.]+)$/i,/(firefox)\/([\w\.]+)/i,/(mozilla)\/([\w\.]+) .+rv\:.+gecko\/\d+/i,/(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir|obigo|mosaic|(?:go|ice|up)[\. ]?browser)[-\/ ]?v?([\w\.]+)/i,/(links) \(([\w\.]+)/i],[h,m]],cpu:[[/(?:(amd|x(?:(?:86|64)[-_])?|wow|win)64)[;\)]/i],[[u,"amd64"]],[/(ia32(?=;))/i],[[u,H]],[/((?:i[346]|x)86)[;\)]/i],[[u,"ia32"]],[/\b(aarch64|arm(v?8e?l?|_?64))\b/i],[[u,"arm64"]],[/\b(arm(?:v[67])?ht?n?[fl]p?)\b/i],[[u,"armhf"]],[/windows (ce|mobile); ppc;/i],[[u,"arm"]],[/((?:ppc|powerpc)(?:64)?)(?: mac|;|\))/i],[[u,/ower/,"",H]],[/(sun4\w)[;\)]/i],[[u,"sparc"]],[/((?:avr32|ia64(?=;))|68k(?=\))|\barm(?=v(?:[1-7]|[5-7]1)l?|;|eabi)|(?=atmel )avr|(?:irix|mips|sparc)(?:64)?\b|pa-risc)/i],[[u,H]]],device:[[/\b(sch-i[89]0\d|shw-m380s|sm-[pt]\w{2,4}|gt-[pn]\d{2,4}|sgh-t8[56]9|nexus 10)/i],[c,[_,N],[E,g]],[/\b((?:s[cgp]h|gt|sm)-\w+|galaxy nexus)/i,/samsung[- ]([-\w]+)/i,/sec-(sgh\w+)/i],[c,[_,N],[E,p]],[/\((ip(?:hone|od)[\w ]*);/i],[c,[_,w],[E,p]],[/\((ipad);[-\w\),; ]+apple/i,/applecoremedia\/[\w\.]+ \((ipad)/i,/\b(ipad)\d\d?,\d\d?[;\]].+ios/i],[c,[_,w],[E,g]],[/\b((?:ag[rs][23]?|bah2?|sht?|btv)-a?[lw]\d{2})\b(?!.+d\/s)/i],[c,[_,L],[E,g]],[/(?:huawei|honor)([-\w ]+)[;\)]/i,/\b(nexus 6p|\w{2,4}-[atu]?[ln][01259x][012359][an]?)\b(?!.+d\/s)/i],[c,[_,L],[E,p]],[/\b(poco[\w ]+)(?: bui|\))/i,/\b; (\w+) build\/hm\1/i,/\b(hm[-_ ]?note?[_ ]?(?:\d\w)?) bui/i,/\b(redmi[\-_ ]?(?:note|k)?[\w_ ]+)(?: bui|\))/i,/\b(mi[-_ ]?(?:a\d|one|one[_ ]plus|note lte|max)?[_ ]?(?:\d?\w?)[_ ]?(?:plus|se|lite)?)(?: bui|\))/i],[[c,/_/g," "],[_,S],[E,p]],[/\b(mi[-_ ]?(?:pad)(?:[\w_ ]+))(?: bui|\))/i],[[c,/_/g," "],[_,S],[E,g]],[/; (\w+) bui.+ oppo/i,/\b(cph[12]\d{3}|p(?:af|c[al]|d\w|e[ar])[mt]\d0|x9007|a101op)\b/i],[c,[_,"OPPO"],[E,p]],[/vivo (\w+)(?: bui|\))/i,/\b(v[12]\d{3}\w?[at])(?: bui|;)/i],[c,[_,"Vivo"],[E,p]],[/\b(rmx[12]\d{3})(?: bui|;|\))/i],[c,[_,"Realme"],[E,p]],[/\b(milestone|droid(?:[2-4x]| (?:bionic|x2|pro|razr))?:?( 4g)?)\b[\w ]+build\//i,/\bmot(?:orola)?[- ](\w*)/i,/((?:moto[\w\(\) ]+|xt\d{3,4}|nexus 6)(?= bui|\)))/i],[c,[_,P],[E,p]],[/\b(mz60\d|xoom[2 ]{0,2}) build\//i],[c,[_,P],[E,g]],[/((?=lg)?[vl]k\-?\d{3}) bui| 3\.[-\w; ]{10}lg?-([06cv9]{3,4})/i],[c,[_,y],[E,g]],[/(lm(?:-?f100[nv]?|-[\w\.]+)(?= bui|\))|nexus [45])/i,/\blg[-e;\/ ]+((?!browser|netcast|android tv)\w+)/i,/\blg-?([\d\w]+) bui/i],[c,[_,y],[E,p]],[/(ideatab[-\w ]+)/i,/lenovo ?(s[56]000[-\w]+|tab(?:[\w ]+)|yt[-\d\w]{6}|tb[-\d\w]{6})/i],[c,[_,"Lenovo"],[E,g]],[/(?:maemo|nokia).*(n900|lumia \d+)/i,/nokia[-_ ]?([-\w\.]*)/i],[[c,/_/g," "],[_,"Nokia"],[E,p]],[/(pixel c)\b/i],[c,[_,b],[E,g]],[/droid.+; (pixel[\daxl ]{0,6})(?: bui|\))/i],[c,[_,b],[E,p]],[/droid.+ ([c-g]\d{4}|so[-gl]\w+|xq-a\w[4-7][12])(?= bui|\).+chrome\/(?![1-6]{0,1}\d\.))/i],[c,[_,D],[E,p]],[/sony tablet [ps]/i,/\b(?:sony)?sgp\w+(?: bui|\))/i],[[c,"Xperia Tablet"],[_,D],[E,g]],[/ (kb2005|in20[12]5|be20[12][59])\b/i,/(?:one)?(?:plus)? (a\d0\d\d)(?: b|\))/i],[c,[_,"OnePlus"],[E,p]],[/(alexa)webm/i,/(kf[a-z]{2}wi)( bui|\))/i,/(kf[a-z]+)( bui|\)).+silk\//i],[c,[_,v],[E,g]],[/((?:sd|kf)[0349hijorstuw]+)( bui|\)).+silk\//i],[[c,/(.+)/g,"Fire Phone $1"],[_,v],[E,p]],[/(playbook);[-\w\),; ]+(rim)/i],[c,_,[E,g]],[/\b((?:bb[a-f]|st[hv])100-\d)/i,/\(bb10; (\w+)/i],[c,[_,B],[E,p]],[/(?:\b|asus_)(transfo[prime ]{4,10} \w+|eeepc|slider \w+|nexus 7|padfone|p00[cj])/i],[c,[_,R],[E,g]],[/ (z[bes]6[027][012][km][ls]|zenfone \d\w?)\b/i],[c,[_,R],[E,p]],[/(nexus 9)/i],[c,[_,"HTC"],[E,g]],[/(htc)[-;_ ]{1,2}([\w ]+(?=\)| bui)|\w+)/i,/(zte)[- ]([\w ]+?)(?: bui|\/|\))/i,/(alcatel|geeksphone|nexian|panasonic|sony)[-_ ]?([-\w]*)/i],[_,[c,/_/g," "],[E,p]],[/droid.+; ([ab][1-7]-?[0178a]\d\d?)/i],[c,[_,"Acer"],[E,g]],[/droid.+; (m[1-5] note) bui/i,/\bmz-([-\w]{2,})/i],[c,[_,"Meizu"],[E,p]],[/\b(sh-?[altvz]?\d\d[a-ekm]?)/i],[c,[_,"Sharp"],[E,p]],[/(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron)[-_ ]?([-\w]*)/i,/(hp) ([\w ]+\w)/i,/(asus)-?(\w+)/i,/(microsoft); (lumia[\w ]+)/i,/(lenovo)[-_ ]?([-\w]+)/i,/(jolla)/i,/(oppo) ?([\w ]+) bui/i],[_,c,[E,p]],[/(archos) (gamepad2?)/i,/(hp).+(touchpad(?!.+tablet)|tablet)/i,/(kindle)\/([\w\.]+)/i,/(nook)[\w ]+build\/(\w+)/i,/(dell) (strea[kpr\d ]*[\dko])/i,/(le[- ]+pan)[- ]+(\w{1,9}) bui/i,/(trinity)[- ]*(t\d{3}) bui/i,/(gigaset)[- ]+(q\w{1,9}) bui/i,/(vodafone) ([\w ]+)(?:\)| bui)/i],[_,c,[E,g]],[/(surface duo)/i],[c,[_,f],[E,g]],[/droid [\d\.]+; (fp\du?)(?: b|\))/i],[c,[_,"Fairphone"],[E,p]],[/(u304aa)/i],[c,[_,"AT&T"],[E,p]],[/\bsie-(\w*)/i],[c,[_,"Siemens"],[E,p]],[/\b(rct\w+) b/i],[c,[_,"RCA"],[E,g]],[/\b(venue[\d ]{2,7}) b/i],[c,[_,"Dell"],[E,g]],[/\b(q(?:mv|ta)\w+) b/i],[c,[_,"Verizon"],[E,g]],[/\b(?:barnes[& ]+noble |bn[rt])([\w\+ ]*) b/i],[c,[_,"Barnes & Noble"],[E,g]],[/\b(tm\d{3}\w+) b/i],[c,[_,"NuVision"],[E,g]],[/\b(k88) b/i],[c,[_,"ZTE"],[E,g]],[/\b(nx\d{3}j) b/i],[c,[_,"ZTE"],[E,p]],[/\b(gen\d{3}) b.+49h/i],[c,[_,"Swiss"],[E,p]],[/\b(zur\d{3}) b/i],[c,[_,"Swiss"],[E,g]],[/\b((zeki)?tb.*\b) b/i],[c,[_,"Zeki"],[E,g]],[/\b([yr]\d{2}) b/i,/\b(dragon[- ]+touch |dt)(\w{5}) b/i],[[_,"Dragon Touch"],c,[E,g]],[/\b(ns-?\w{0,9}) b/i],[c,[_,"Insignia"],[E,g]],[/\b((nxa|next)-?\w{0,9}) b/i],[c,[_,"NextBook"],[E,g]],[/\b(xtreme\_)?(v(1[045]|2[015]|[3469]0|7[05])) b/i],[[_,"Voice"],c,[E,p]],[/\b(lvtel\-)?(v1[12]) b/i],[[_,"LvTel"],c,[E,p]],[/\b(ph-1) /i],[c,[_,"Essential"],[E,p]],[/\b(v(100md|700na|7011|917g).*\b) b/i],[c,[_,"Envizen"],[E,g]],[/\b(trio[-\w\. ]+) b/i],[c,[_,"MachSpeed"],[E,g]],[/\btu_(1491) b/i],[c,[_,"Rotor"],[E,g]],[/(shield[\w ]+) b/i],[c,[_,"Nvidia"],[E,g]],[/(sprint) (\w+)/i],[_,c,[E,p]],[/(kin\.[onetw]{3})/i],[[c,/\./g," "],[_,f],[E,p]],[/droid.+; (cc6666?|et5[16]|mc[239][23]x?|vc8[03]x?)\)/i],[c,[_,M],[E,g]],[/droid.+; (ec30|ps20|tc[2-8]\d[kx])\)/i],[c,[_,M],[E,p]],[/(ouya)/i,/(nintendo) ([wids3utch]+)/i],[_,c,[E,I]],[/droid.+; (shield) bui/i],[c,[_,"Nvidia"],[E,I]],[/(playstation [345portablevi]+)/i],[c,[_,D],[E,I]],[/\b(xbox(?: one)?(?!; xbox))[\); ]/i],[c,[_,f],[E,I]],[/smart-tv.+(samsung)/i],[_,[E,O]],[/hbbtv.+maple;(\d+)/i],[[c,/^/,"SmartTV"],[_,N],[E,O]],[/(nux; netcast.+smarttv|lg (netcast\.tv-201\d|android tv))/i],[[_,y],[E,O]],[/(apple) ?tv/i],[_,[c,"Apple TV"],[E,O]],[/crkey/i],[[c,"Chromecast"],[_,b],[E,O]],[/droid.+aft(\w)( bui|\))/i],[c,[_,v],[E,O]],[/\(dtv[\);].+(aquos)/i],[c,[_,"Sharp"],[E,O]],[/\b(roku)[\dx]*[\)\/]((?:dvp-)?[\d\.]*)/i,/hbbtv\/\d+\.\d+\.\d+ +\([\w ]*; *(\w[^;]*);([^;]*)/i],[[_,U],[c,U],[E,O]],[/\b(android tv|smart[- ]?tv|opera tv|tv; rv:)\b/i],[[E,O]],[/((pebble))app/i],[_,c,[E,T]],[/droid.+; (glass) \d/i],[c,[_,b],[E,T]],[/droid.+; (wt63?0{2,3})\)/i],[c,[_,M],[E,T]],[/(quest( 2)?)/i],[c,[_,k],[E,T]],[/(tesla)(?: qtcarbrowser|\/[-\w\.]+)/i],[_,[E,C]],[/droid .+?; ([^;]+?)(?: bui|\) applew).+? mobile safari/i],[c,[E,p]],[/droid .+?; ([^;]+?)(?: bui|\) applew).+?(?! mobile) safari/i],[c,[E,g]],[/\b((tablet|tab)[;\/]|focus\/\d(?!.+mobile))/i],[[E,g]],[/(phone|mobile(?:[;\/]| safari)|pda(?=.+windows ce))/i],[[E,p]],[/(android[-\w\. ]{0,9});.+buil/i],[c,[_,"Generic"]]],engine:[[/windows.+ edge\/([\w\.]+)/i],[m,[h,"EdgeHTML"]],[/webkit\/537\.36.+chrome\/(?!27)([\w\.]+)/i],[m,[h,"Blink"]],[/(presto)\/([\w\.]+)/i,/(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna)\/([\w\.]+)/i,/ekioh(flow)\/([\w\.]+)/i,/(khtml|tasman|links)[\/ ]\(?([\w\.]+)/i,/(icab)[\/ ]([23]\.[\d\.]+)/i],[h,m],[/rv\:([\w\.]{1,9})\b.+(gecko)/i],[m,h]],os:[[/microsoft (windows) (vista|xp)/i],[h,m],[/(windows) nt 6\.2; (arm)/i,/(windows (?:phone(?: os)?|mobile))[\/ ]?([\d\.\w ]*)/i,/(windows)[\/ ]?([ntce\d\. ]+\w)(?!.+xbox)/i],[h,[m,x,W]],[/(win(?=3|9|n)|win 9x )([nt\d\.]+)/i],[[h,"Windows"],[m,x,W]],[/ip[honead]{2,4}\b(?:.*os ([\w]+) like mac|; opera)/i,/cfnetwork\/.+darwin/i],[[m,/_/g,"."],[h,"iOS"]],[/(mac os x) ?([\w\. ]*)/i,/(macintosh|mac_powerpc\b)(?!.+haiku)/i],[[h,"Mac OS"],[m,/_/g,"."]],[/droid ([\w\.]+)\b.+(android[- ]x86)/i],[m,h],[/(android|webos|qnx|bada|rim tablet os|maemo|meego|sailfish)[-\/ ]?([\w\.]*)/i,/(blackberry)\w*\/([\w\.]*)/i,/(tizen|kaios)[\/ ]([\w\.]+)/i,/\((series40);/i],[h,m],[/\(bb(10);/i],[m,[h,B]],[/(?:symbian ?os|symbos|s60(?=;)|series60)[-\/ ]?([\w\.]*)/i],[m,[h,"Symbian"]],[/mozilla\/[\d\.]+ \((?:mobile|tablet|tv|mobile; [\w ]+); rv:.+ gecko\/([\w\.]+)/i],[m,[h,"Firefox OS"]],[/web0s;.+rt(tv)/i,/\b(?:hp)?wos(?:browser)?\/([\w\.]+)/i],[m,[h,"webOS"]],[/crkey\/([\d\.]+)/i],[m,[h,"Chromecast"]],[/(cros) [\w]+ ([\w\.]+\w)/i],[[h,"Chromium OS"],m],[/(nintendo|playstation) ([wids345portablevuch]+)/i,/(xbox); +xbox ([^\);]+)/i,/\b(joli|palm)\b ?(?:os)?\/?([\w\.]*)/i,/(mint)[\/\(\) ]?(\w*)/i,/(mageia|vectorlinux)[; ]/i,/([kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?= linux)|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire)(?: gnu\/linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\/ ]?(?!chrom|package)([-\w\.]*)/i,/(hurd|linux) ?([\w\.]*)/i,/(gnu) ?([\w\.]*)/i,/\b([-frentopcghs]{0,5}bsd|dragonfly)[\/ ]?(?!amd|[ix346]{1,2}86)([\w\.]*)/i,/(haiku) (\w+)/i],[h,m],[/(sunos) ?([\w\.\d]*)/i],[[h,"Solaris"],m],[/((?:open)?solaris)[-\/ ]?([\w\.]*)/i,/(aix) ((\d)(?=\.|\)| )[\w\.])*/i,/\b(beos|os\/2|amigaos|morphos|openvms|fuchsia|hp-ux)/i,/(unix) ?([\w\.]*)/i],[h,m]]},X=function(e,t){if(typeof e===d&&(t=e,e=o),!(this instanceof X))return new X(e,t).getResult();var i=e||(typeof n!==a&&n.navigator&&n.navigator.userAgent?n.navigator.userAgent:""),s=t?function(e,t){var i={};for(var s in e)t[s]&&t[s].length%2==0?i[s]=t[s].concat(e[s]):i[s]=e[s];return i}(G,t):G;return this.getBrowser=function(){var e,t={};return t.name=o,t.version=o,V.call(t,i,s.browser),t.major=typeof(e=t.version)===l?e.replace(/[^\d\.]/g,"").split(".")[0]:o,t},this.getCPU=function(){var e={};return e.architecture=o,V.call(e,i,s.cpu),e},this.getDevice=function(){var e={};return e.vendor=o,e.model=o,e.type=o,V.call(e,i,s.device),e},this.getEngine=function(){var e={};return e.name=o,e.version=o,V.call(e,i,s.engine),e},this.getOS=function(){var e={};return e.name=o,e.version=o,V.call(e,i,s.os),e},this.getResult=function(){return{ua:this.getUA(),browser:this.getBrowser(),engine:this.getEngine(),os:this.getOS(),device:this.getDevice(),cpu:this.getCPU()}},this.getUA=function(){return i},this.setUA=function(e){return i=typeof e===l&&e.length>255?U(e,255):e,this},this.setUA(i),this};X.VERSION="1.0.2",X.BROWSER=A([h,m,"major"]),X.CPU=A([u]),X.DEVICE=A([c,_,E,I,p,O,g,T,C]),X.ENGINE=X.OS=A([h,m]),typeof t!==a?(e.exports&&(t=e.exports=X),t.UAParser=X):i.amdO?(s=function(){return X}.call(t,i,t,e))===o||(e.exports=s):typeof n!==a&&(n.UAParser=X);var j=typeof n!==a&&(n.jQuery||n.Zepto);if(j&&!j.ua){var J=new X;j.ua=J.getResult(),j.ua.get=function(){return J.getUA()},j.ua.set=function(e){J.setUA(e);var t=J.getResult();for(var i in t)j.ua[i]=t[i]}}}("object"==typeof window?window:this)}},t={};function i(s){var n=t[s];if(void 0!==n)return n.exports;var o=t[s]={exports:{}};return e[s].call(o.exports,o,o.exports,i),o.exports}i.amdO={},i(744)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,